
STM32_Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000268  2000000c  08001fd4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000274  08001fd4  00020274  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b5b5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003594  00000000  00000000  0003b5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d487  00000000  00000000  0003eb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ba8  00000000  00000000  0004c008  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002450  00000000  00000000  0004cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008639  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042dd  00000000  00000000  00057639  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b916  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002610  00000000  00000000  0005b994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f20 	.word	0x08001f20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f20 	.word	0x08001f20

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000152:	490d      	ldr	r1, [pc, #52]	; (8000188 <HAL_InitTick+0x3c>)
 8000154:	4a0d      	ldr	r2, [pc, #52]	; (800018c <HAL_InitTick+0x40>)
 8000156:	7809      	ldrb	r1, [r1, #0]
 8000158:	6812      	ldr	r2, [r2, #0]
 800015a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800015e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	fbb2 f0f3 	udiv	r0, r2, r3
 8000164:	f000 f882 	bl	800026c <HAL_SYSTICK_Config>
 8000168:	b908      	cbnz	r0, 800016e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2d0f      	cmp	r5, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000170:	bd38      	pop	{r3, r4, r5, pc}
 8000172:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000174:	4602      	mov	r2, r0
 8000176:	4629      	mov	r1, r5
 8000178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800017c:	f000 f840 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <HAL_InitTick+0x44>)
 8000182:	4620      	mov	r0, r4
 8000184:	601d      	str	r5, [r3, #0]
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fbfa 	bl	80019a4 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000005c 	.word	0x2000005c

080001dc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001dc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	400b      	ands	r3, r1
 80001ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f6:	60d3      	str	r3, [r2, #12]
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b470      	push	{r4, r5, r6}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0607 	rsb	r6, r4, #7
 800020e:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000210:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000214:	bf28      	it	cs
 8000216:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	2b06      	cmp	r3, #6
 800021a:	d917      	bls.n	800024c <HAL_NVIC_SetPriority+0x4c>
 800021c:	2501      	movs	r5, #1
 800021e:	3c03      	subs	r4, #3
 8000220:	40a5      	lsls	r5, r4
 8000222:	3d01      	subs	r5, #1
 8000224:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000226:	2301      	movs	r3, #1
 8000228:	40b3      	lsls	r3, r6
 800022a:	3b01      	subs	r3, #1
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000230:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000236:	db0c      	blt.n	8000252 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	0109      	lsls	r1, r1, #4
 800023a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000244:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000248:	bc70      	pop	{r4, r5, r6}
 800024a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	2200      	movs	r2, #0
 800024e:	4614      	mov	r4, r2
 8000250:	e7e9      	b.n	8000226 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <HAL_NVIC_SetPriority+0x68>)
 8000254:	f000 000f 	and.w	r0, r0, #15
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	b2c9      	uxtb	r1, r1
 800025c:	4403      	add	r3, r0
 800025e:	7619      	strb	r1, [r3, #24]
 8000260:	bc70      	pop	{r4, r5, r6}
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000ecfc 	.word	0xe000ecfc

0800026c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800026c:	3801      	subs	r0, #1
 800026e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000272:	d20d      	bcs.n	8000290 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000274:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000278:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	4c06      	ldr	r4, [pc, #24]	; (8000298 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000280:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000286:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000288:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028c:	6019      	str	r1, [r3, #0]
 800028e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000290:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000292:	4770      	bx	lr
 8000294:	e000e010 	.word	0xe000e010
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800029e:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002a0:	6813      	ldr	r3, [r2, #0]
 80002a2:	bf0c      	ite	eq
 80002a4:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002a8:	f023 0304 	bicne.w	r3, r3, #4
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	4770      	bx	lr
 80002b0:	e000e010 	.word	0xe000e010

080002b4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80002b4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002b6:	f001 f8e1 	bl	800147c <HAL_SYSTICK_Callback>
 80002ba:	bd08      	pop	{r3, pc}

080002bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002c0:	f04f 0800 	mov.w	r8, #0
{
 80002c4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002c6:	4643      	mov	r3, r8
{
 80002c8:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002cc:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80004ac <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80002d0:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80004b0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80002d4:	4f6f      	ldr	r7, [pc, #444]	; (8000494 <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 80002d6:	9000      	str	r0, [sp, #0]
 80002d8:	e005      	b.n	80002e6 <HAL_GPIO_Init+0x2a>
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002da:	3301      	adds	r3, #1
 80002dc:	2b10      	cmp	r3, #16
 80002de:	f106 0604 	add.w	r6, r6, #4
 80002e2:	f000 8089 	beq.w	80003f8 <HAL_GPIO_Init+0x13c>
    ioposition = (0x01U << position);
 80002e6:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e8:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002ea:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 80002ee:	42a2      	cmp	r2, r4
 80002f0:	d1f3      	bne.n	80002da <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80002f2:	684d      	ldr	r5, [r1, #4]
 80002f4:	2d12      	cmp	r5, #18
 80002f6:	f000 80a3 	beq.w	8000440 <HAL_GPIO_Init+0x184>
 80002fa:	f200 808c 	bhi.w	8000416 <HAL_GPIO_Init+0x15a>
 80002fe:	2d02      	cmp	r5, #2
 8000300:	f000 80a5 	beq.w	800044e <HAL_GPIO_Init+0x192>
 8000304:	f240 8081 	bls.w	800040a <HAL_GPIO_Init+0x14e>
 8000308:	2d03      	cmp	r5, #3
 800030a:	f000 809d 	beq.w	8000448 <HAL_GPIO_Init+0x18c>
 800030e:	2d11      	cmp	r5, #17
 8000310:	d102      	bne.n	8000318 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000312:	68ca      	ldr	r2, [r1, #12]
 8000314:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	d870      	bhi.n	80003fe <HAL_GPIO_Init+0x142>
 800031c:	9a00      	ldr	r2, [sp, #0]
 800031e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8000322:	4691      	mov	r9, r2
 8000324:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000326:	250f      	movs	r5, #15
 8000328:	fa05 fb0a 	lsl.w	fp, r5, sl
 800032c:	ea22 020b 	bic.w	r2, r2, fp
 8000330:	fa08 fa0a 	lsl.w	sl, r8, sl
 8000334:	ea42 020a 	orr.w	r2, r2, sl
 8000338:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800033c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000340:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000344:	d0c9      	beq.n	80002da <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000346:	f8de 9018 	ldr.w	r9, [lr, #24]
 800034a:	f023 0203 	bic.w	r2, r3, #3
 800034e:	f049 0901 	orr.w	r9, r9, #1
 8000352:	f8ce 9018 	str.w	r9, [lr, #24]
 8000356:	f8de 9018 	ldr.w	r9, [lr, #24]
 800035a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800035e:	f009 0901 	and.w	r9, r9, #1
 8000362:	f8cd 900c 	str.w	r9, [sp, #12]
 8000366:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036a:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000372:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000376:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037a:	fa05 f509 	lsl.w	r5, r5, r9
 800037e:	ea2b 0005 	bic.w	r0, fp, r5
 8000382:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000384:	9800      	ldr	r0, [sp, #0]
 8000386:	4560      	cmp	r0, ip
 8000388:	d077      	beq.n	800047a <HAL_GPIO_Init+0x1be>
 800038a:	4d43      	ldr	r5, [pc, #268]	; (8000498 <HAL_GPIO_Init+0x1dc>)
 800038c:	42a8      	cmp	r0, r5
 800038e:	d077      	beq.n	8000480 <HAL_GPIO_Init+0x1c4>
 8000390:	4d42      	ldr	r5, [pc, #264]	; (800049c <HAL_GPIO_Init+0x1e0>)
 8000392:	42a8      	cmp	r0, r5
 8000394:	d079      	beq.n	800048a <HAL_GPIO_Init+0x1ce>
 8000396:	4d42      	ldr	r5, [pc, #264]	; (80004a0 <HAL_GPIO_Init+0x1e4>)
 8000398:	42a8      	cmp	r0, r5
 800039a:	bf0c      	ite	eq
 800039c:	f04f 0b03 	moveq.w	fp, #3
 80003a0:	f04f 0b04 	movne.w	fp, #4
 80003a4:	fa0b f909 	lsl.w	r9, fp, r9
 80003a8:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003aa:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003ae:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b2:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003b4:	683a      	ldr	r2, [r7, #0]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003b6:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	bf14      	ite	ne
 80003bc:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003be:	43a2      	biceq	r2, r4
 80003c0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003c2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003c4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	bf14      	ite	ne
 80003ca:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003cc:	43a2      	biceq	r2, r4
 80003ce:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	bf14      	ite	ne
 80003d8:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003da:	43a2      	biceq	r2, r4
 80003dc:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003de:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	bf14      	ite	ne
 80003e6:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e8:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ec:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	60fc      	str	r4, [r7, #12]
 80003f0:	f106 0604 	add.w	r6, r6, #4
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	f47f af77 	bne.w	80002e6 <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 80003f8:	b005      	add	sp, #20
 80003fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003fe:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000400:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000402:	6842      	ldr	r2, [r0, #4]
 8000404:	f100 0904 	add.w	r9, r0, #4
 8000408:	e78d      	b.n	8000326 <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 800040a:	b1a5      	cbz	r5, 8000436 <HAL_GPIO_Init+0x17a>
 800040c:	2d01      	cmp	r5, #1
 800040e:	d183      	bne.n	8000318 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000410:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 8000414:	e780      	b.n	8000318 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8000416:	4823      	ldr	r0, [pc, #140]	; (80004a4 <HAL_GPIO_Init+0x1e8>)
 8000418:	4285      	cmp	r5, r0
 800041a:	d00c      	beq.n	8000436 <HAL_GPIO_Init+0x17a>
 800041c:	d91b      	bls.n	8000456 <HAL_GPIO_Init+0x19a>
 800041e:	4822      	ldr	r0, [pc, #136]	; (80004a8 <HAL_GPIO_Init+0x1ec>)
 8000420:	4285      	cmp	r5, r0
 8000422:	d008      	beq.n	8000436 <HAL_GPIO_Init+0x17a>
 8000424:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8000428:	4285      	cmp	r5, r0
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0x17a>
 800042c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80004b4 <HAL_GPIO_Init+0x1f8>
 8000430:	454d      	cmp	r5, r9
 8000432:	f47f af71 	bne.w	8000318 <HAL_GPIO_Init+0x5c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000436:	688d      	ldr	r5, [r1, #8]
 8000438:	b9bd      	cbnz	r5, 800046a <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800043a:	f04f 0804 	mov.w	r8, #4
 800043e:	e76b      	b.n	8000318 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000440:	68ca      	ldr	r2, [r1, #12]
 8000442:	f102 080c 	add.w	r8, r2, #12
          break;
 8000446:	e767      	b.n	8000318 <HAL_GPIO_Init+0x5c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000448:	f04f 0800 	mov.w	r8, #0
 800044c:	e764      	b.n	8000318 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800044e:	68ca      	ldr	r2, [r1, #12]
 8000450:	f102 0808 	add.w	r8, r2, #8
          break;
 8000454:	e760      	b.n	8000318 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 8000456:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80004b8 <HAL_GPIO_Init+0x1fc>
 800045a:	454d      	cmp	r5, r9
 800045c:	d0eb      	beq.n	8000436 <HAL_GPIO_Init+0x17a>
 800045e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000462:	454d      	cmp	r5, r9
 8000464:	f47f af58 	bne.w	8000318 <HAL_GPIO_Init+0x5c>
 8000468:	e7e5      	b.n	8000436 <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 800046a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800046c:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 800046e:	bf0c      	ite	eq
 8000470:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8000472:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000474:	f04f 0808 	mov.w	r8, #8
 8000478:	e74e      	b.n	8000318 <HAL_GPIO_Init+0x5c>
 800047a:	f04f 0900 	mov.w	r9, #0
 800047e:	e793      	b.n	80003a8 <HAL_GPIO_Init+0xec>
 8000480:	f04f 0b01 	mov.w	fp, #1
 8000484:	fa0b f909 	lsl.w	r9, fp, r9
 8000488:	e78e      	b.n	80003a8 <HAL_GPIO_Init+0xec>
 800048a:	f04f 0b02 	mov.w	fp, #2
 800048e:	fa0b f909 	lsl.w	r9, fp, r9
 8000492:	e789      	b.n	80003a8 <HAL_GPIO_Init+0xec>
 8000494:	40010400 	.word	0x40010400
 8000498:	40010c00 	.word	0x40010c00
 800049c:	40011000 	.word	0x40011000
 80004a0:	40011400 	.word	0x40011400
 80004a4:	10210000 	.word	0x10210000
 80004a8:	10310000 	.word	0x10310000
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010800 	.word	0x40010800
 80004b4:	10220000 	.word	0x10220000
 80004b8:	10110000 	.word	0x10110000

080004bc <HAL_I2C_Init>:
{
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80004bc:	2800      	cmp	r0, #0
 80004be:	d07e      	beq.n	80005be <HAL_I2C_Init+0x102>
{
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80004c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80004c6:	4604      	mov	r4, r0
 80004c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d061      	beq.n	8000594 <HAL_I2C_Init+0xd8>
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004d0:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004d2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80004d8:	6813      	ldr	r3, [r2, #0]
 80004da:	f023 0301 	bic.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80004e0:	f000 fb7e 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	4a37      	ldr	r2, [pc, #220]	; (80005c4 <HAL_I2C_Init+0x108>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d830      	bhi.n	800054e <HAL_I2C_Init+0x92>
 80004ec:	4a36      	ldr	r2, [pc, #216]	; (80005c8 <HAL_I2C_Init+0x10c>)
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d94e      	bls.n	8000590 <HAL_I2C_Init+0xd4>
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80004f2:	005a      	lsls	r2, r3, #1
 80004f4:	1e43      	subs	r3, r0, #1
 80004f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80004fa:	3301      	adds	r3, #1
 80004fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000500:	2b04      	cmp	r3, #4
 8000502:	bf38      	it	cc
 8000504:	2304      	movcc	r3, #4
  freqrange = I2C_FREQRANGE(pclk1);
 8000506:	4a31      	ldr	r2, [pc, #196]	; (80005cc <HAL_I2C_Init+0x110>)
 8000508:	fba2 2000 	umull	r2, r0, r2, r0
  hi2c->Instance->CR2 = freqrange;
 800050c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800050e:	0c80      	lsrs	r0, r0, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000510:	1c41      	adds	r1, r0, #1
  hi2c->Instance->CR2 = freqrange;
 8000512:	6050      	str	r0, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000514:	6211      	str	r1, [r2, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000516:	2100      	movs	r1, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000518:	f04f 0e20 	mov.w	lr, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800051c:	69e0      	ldr	r0, [r4, #28]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800051e:	68e7      	ldr	r7, [r4, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000520:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000522:	6925      	ldr	r5, [r4, #16]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000524:	4306      	orrs	r6, r0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000526:	433d      	orrs	r5, r7
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000528:	6960      	ldr	r0, [r4, #20]
 800052a:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800052c:	61d3      	str	r3, [r2, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800052e:	4338      	orrs	r0, r7
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000530:	6016      	str	r6, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000532:	6095      	str	r5, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000534:	60d0      	str	r0, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000536:	6813      	ldr	r3, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8000538:	4608      	mov	r0, r1
  __HAL_I2C_ENABLE(hi2c);
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000540:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000542:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000546:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000548:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <HAL_I2C_Init+0x114>)
 8000550:	4290      	cmp	r0, r2
 8000552:	d91d      	bls.n	8000590 <HAL_I2C_Init+0xd4>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000554:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000558:	4d1c      	ldr	r5, [pc, #112]	; (80005cc <HAL_I2C_Init+0x110>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <HAL_I2C_Init+0x118>)
  freqrange = I2C_FREQRANGE(pclk1);
 800055c:	fba5 6500 	umull	r6, r5, r5, r0
 8000560:	0cad      	lsrs	r5, r5, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000562:	fb01 f105 	mul.w	r1, r1, r5
 8000566:	fba2 2101 	umull	r2, r1, r2, r1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800056a:	68a6      	ldr	r6, [r4, #8]
  hi2c->Instance->CR2 = freqrange;
 800056c:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800056e:	0989      	lsrs	r1, r1, #6
 8000570:	3101      	adds	r1, #1
  hi2c->Instance->CR2 = freqrange;
 8000572:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000574:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000576:	b996      	cbnz	r6, 800059e <HAL_I2C_Init+0xe2>
 8000578:	3801      	subs	r0, #1
 800057a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800057e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000582:	3301      	adds	r3, #1
 8000584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000588:	b1bb      	cbz	r3, 80005ba <HAL_I2C_Init+0xfe>
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	e7c2      	b.n	8000516 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 8000590:	2001      	movs	r0, #1
 8000592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000594:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000598:	f000 fee8 	bl	800136c <HAL_I2C_MspInit>
 800059c:	e798      	b.n	80004d0 <HAL_I2C_Init+0x14>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800059e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005a6:	3801      	subs	r0, #1
 80005a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80005ac:	3301      	adds	r3, #1
 80005ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005b2:	b113      	cbz	r3, 80005ba <HAL_I2C_Init+0xfe>
 80005b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b8:	e7ad      	b.n	8000516 <HAL_I2C_Init+0x5a>
 80005ba:	2301      	movs	r3, #1
 80005bc:	e7ab      	b.n	8000516 <HAL_I2C_Init+0x5a>
    return HAL_ERROR;
 80005be:	2001      	movs	r0, #1
}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	000186a0 	.word	0x000186a0
 80005c8:	001e847f 	.word	0x001e847f
 80005cc:	431bde83 	.word	0x431bde83
 80005d0:	003d08ff 	.word	0x003d08ff
 80005d4:	10624dd3 	.word	0x10624dd3

080005d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005dc:	6803      	ldr	r3, [r0, #0]
{
 80005de:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e0:	07dd      	lsls	r5, r3, #31
{
 80005e2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e4:	d530      	bpl.n	8000648 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005e6:	49ad      	ldr	r1, [pc, #692]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 80005e8:	684a      	ldr	r2, [r1, #4]
 80005ea:	f002 020c 	and.w	r2, r2, #12
 80005ee:	2a04      	cmp	r2, #4
 80005f0:	f000 80fa 	beq.w	80007e8 <HAL_RCC_OscConfig+0x210>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005f4:	684a      	ldr	r2, [r1, #4]
 80005f6:	f002 020c 	and.w	r2, r2, #12
 80005fa:	2a08      	cmp	r2, #8
 80005fc:	f000 80f0 	beq.w	80007e0 <HAL_RCC_OscConfig+0x208>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000600:	6863      	ldr	r3, [r4, #4]
 8000602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000606:	f000 8174 	beq.w	80008f2 <HAL_RCC_OscConfig+0x31a>
 800060a:	2b00      	cmp	r3, #0
 800060c:	f000 8104 	beq.w	8000818 <HAL_RCC_OscConfig+0x240>
 8000610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000614:	f000 81a9 	beq.w	800096a <HAL_RCC_OscConfig+0x392>
 8000618:	4ba0      	ldr	r3, [pc, #640]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000628:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800062a:	f7ff fdd1 	bl	80001d0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800062e:	4d9b      	ldr	r5, [pc, #620]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8000630:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000632:	e005      	b.n	8000640 <HAL_RCC_OscConfig+0x68>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000634:	f7ff fdcc 	bl	80001d0 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2864      	cmp	r0, #100	; 0x64
 800063c:	f200 8117 	bhi.w	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000640:	682b      	ldr	r3, [r5, #0]
 8000642:	039a      	lsls	r2, r3, #14
 8000644:	d5f6      	bpl.n	8000634 <HAL_RCC_OscConfig+0x5c>
 8000646:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000648:	079f      	lsls	r7, r3, #30
 800064a:	d528      	bpl.n	800069e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800064c:	4a93      	ldr	r2, [pc, #588]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 800064e:	6851      	ldr	r1, [r2, #4]
 8000650:	f011 0f0c 	tst.w	r1, #12
 8000654:	f000 80a9 	beq.w	80007aa <HAL_RCC_OscConfig+0x1d2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000658:	6851      	ldr	r1, [r2, #4]
 800065a:	f001 010c 	and.w	r1, r1, #12
 800065e:	2908      	cmp	r1, #8
 8000660:	f000 809f 	beq.w	80007a2 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000664:	6923      	ldr	r3, [r4, #16]
 8000666:	2b00      	cmp	r3, #0
 8000668:	f000 8132 	beq.w	80008d0 <HAL_RCC_OscConfig+0x2f8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800066c:	2201      	movs	r2, #1
 800066e:	4b8c      	ldr	r3, [pc, #560]	; (80008a0 <HAL_RCC_OscConfig+0x2c8>)
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000670:	4d8a      	ldr	r5, [pc, #552]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8000672:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000674:	f7ff fdac 	bl	80001d0 <HAL_GetTick>
 8000678:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067a:	e005      	b.n	8000688 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067c:	f7ff fda8 	bl	80001d0 <HAL_GetTick>
 8000680:	1b80      	subs	r0, r0, r6
 8000682:	2802      	cmp	r0, #2
 8000684:	f200 80f3 	bhi.w	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	0798      	lsls	r0, r3, #30
 800068c:	d5f6      	bpl.n	800067c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068e:	682b      	ldr	r3, [r5, #0]
 8000690:	6962      	ldr	r2, [r4, #20]
 8000692:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000696:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800069a:	602b      	str	r3, [r5, #0]
 800069c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800069e:	071a      	lsls	r2, r3, #28
 80006a0:	d45d      	bmi.n	800075e <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006a2:	075d      	lsls	r5, r3, #29
 80006a4:	d53a      	bpl.n	800071c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006a6:	4b7d      	ldr	r3, [pc, #500]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	00d0      	lsls	r0, r2, #3
 80006ac:	f100 80a6 	bmi.w	80007fc <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80006b0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006b8:	61da      	str	r2, [r3, #28]
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	9b00      	ldr	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c4:	4b77      	ldr	r3, [pc, #476]	; (80008a4 <HAL_RCC_OscConfig+0x2cc>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	05d1      	lsls	r1, r2, #23
 80006ca:	f140 80bf 	bpl.w	800084c <HAL_RCC_OscConfig+0x274>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ce:	68e3      	ldr	r3, [r4, #12]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	f000 8114 	beq.w	80008fe <HAL_RCC_OscConfig+0x326>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 80cd 	beq.w	8000876 <HAL_RCC_OscConfig+0x29e>
 80006dc:	2b05      	cmp	r3, #5
 80006de:	4b6f      	ldr	r3, [pc, #444]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	f000 814f 	beq.w	8000984 <HAL_RCC_OscConfig+0x3ac>
 80006e6:	f022 0201 	bic.w	r2, r2, #1
 80006ea:	621a      	str	r2, [r3, #32]
 80006ec:	6a1a      	ldr	r2, [r3, #32]
 80006ee:	f022 0204 	bic.w	r2, r2, #4
 80006f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006f4:	f7ff fd6c 	bl	80001d0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006f8:	4e68      	ldr	r6, [pc, #416]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 80006fa:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006fc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000700:	e006      	b.n	8000710 <HAL_RCC_OscConfig+0x138>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000702:	f7ff fd65 	bl	80001d0 <HAL_GetTick>
 8000706:	eba0 0008 	sub.w	r0, r0, r8
 800070a:	42b8      	cmp	r0, r7
 800070c:	f200 80af 	bhi.w	800086e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000710:	6a33      	ldr	r3, [r6, #32]
 8000712:	079b      	lsls	r3, r3, #30
 8000714:	d5f5      	bpl.n	8000702 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000716:	2d00      	cmp	r5, #0
 8000718:	f040 80f7 	bne.w	800090a <HAL_RCC_OscConfig+0x332>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800071c:	69e3      	ldr	r3, [r4, #28]
 800071e:	b1d3      	cbz	r3, 8000756 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000720:	4d5e      	ldr	r5, [pc, #376]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 8000722:	686a      	ldr	r2, [r5, #4]
 8000724:	f002 020c 	and.w	r2, r2, #12
 8000728:	2a08      	cmp	r2, #8
 800072a:	d045      	beq.n	80007b8 <HAL_RCC_OscConfig+0x1e0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800072c:	2b02      	cmp	r3, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <HAL_RCC_OscConfig+0x2d0>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000734:	f000 80ef 	beq.w	8000916 <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000738:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800073a:	f7ff fd49 	bl	80001d0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800073e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000740:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000742:	e005      	b.n	8000750 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000744:	f7ff fd44 	bl	80001d0 <HAL_GetTick>
 8000748:	1b40      	subs	r0, r0, r5
 800074a:	2802      	cmp	r0, #2
 800074c:	f200 808f 	bhi.w	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	019b      	lsls	r3, r3, #6
 8000754:	d4f6      	bmi.n	8000744 <HAL_RCC_OscConfig+0x16c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000756:	2000      	movs	r0, #0
}
 8000758:	b002      	add	sp, #8
 800075a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800075e:	69a3      	ldr	r3, [r4, #24]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02d      	beq.n	80007c0 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_LSI_ENABLE();
 8000764:	2201      	movs	r2, #1
 8000766:	4b51      	ldr	r3, [pc, #324]	; (80008ac <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000768:	4d4c      	ldr	r5, [pc, #304]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 800076a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000772:	e004      	b.n	800077e <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000774:	f7ff fd2c 	bl	80001d0 <HAL_GetTick>
 8000778:	1b80      	subs	r0, r0, r6
 800077a:	2802      	cmp	r0, #2
 800077c:	d877      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800077e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000780:	079b      	lsls	r3, r3, #30
 8000782:	d5f7      	bpl.n	8000774 <HAL_RCC_OscConfig+0x19c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000784:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <HAL_RCC_OscConfig+0x2d8>)
 8000786:	4a4b      	ldr	r2, [pc, #300]	; (80008b4 <HAL_RCC_OscConfig+0x2dc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	0a5b      	lsrs	r3, r3, #9
 8000790:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000792:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000794:	9b01      	ldr	r3, [sp, #4]
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	9201      	str	r2, [sp, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f9      	bne.n	8000792 <HAL_RCC_OscConfig+0x1ba>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	e77f      	b.n	80006a2 <HAL_RCC_OscConfig+0xca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007a2:	6852      	ldr	r2, [r2, #4]
 80007a4:	03d6      	lsls	r6, r2, #15
 80007a6:	f53f af5d 	bmi.w	8000664 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007aa:	4a3c      	ldr	r2, [pc, #240]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	0795      	lsls	r5, r2, #30
 80007b0:	d526      	bpl.n	8000800 <HAL_RCC_OscConfig+0x228>
 80007b2:	6922      	ldr	r2, [r4, #16]
 80007b4:	2a01      	cmp	r2, #1
 80007b6:	d023      	beq.n	8000800 <HAL_RCC_OscConfig+0x228>
        return HAL_ERROR;
 80007b8:	2001      	movs	r0, #1
}
 80007ba:	b002      	add	sp, #8
 80007bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80007c0:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007c2:	4d36      	ldr	r5, [pc, #216]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 80007c4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd03 	bl	80001d0 <HAL_GetTick>
 80007ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007cc:	e004      	b.n	80007d8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ce:	f7ff fcff 	bl	80001d0 <HAL_GetTick>
 80007d2:	1b80      	subs	r0, r0, r6
 80007d4:	2802      	cmp	r0, #2
 80007d6:	d84a      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007da:	079f      	lsls	r7, r3, #30
 80007dc:	d4f7      	bmi.n	80007ce <HAL_RCC_OscConfig+0x1f6>
 80007de:	e7de      	b.n	800079e <HAL_RCC_OscConfig+0x1c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e0:	684a      	ldr	r2, [r1, #4]
 80007e2:	03d0      	lsls	r0, r2, #15
 80007e4:	f57f af0c 	bpl.w	8000600 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	0391      	lsls	r1, r2, #14
 80007ee:	f57f af2b 	bpl.w	8000648 <HAL_RCC_OscConfig+0x70>
 80007f2:	6862      	ldr	r2, [r4, #4]
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	f47f af27 	bne.w	8000648 <HAL_RCC_OscConfig+0x70>
 80007fa:	e7dd      	b.n	80007b8 <HAL_RCC_OscConfig+0x1e0>
    FlagStatus       pwrclkchanged = RESET;
 80007fc:	2500      	movs	r5, #0
 80007fe:	e761      	b.n	80006c4 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000800:	4926      	ldr	r1, [pc, #152]	; (800089c <HAL_RCC_OscConfig+0x2c4>)
 8000802:	6960      	ldr	r0, [r4, #20]
 8000804:	680a      	ldr	r2, [r1, #0]
 8000806:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800080a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800080e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000810:	071a      	lsls	r2, r3, #28
 8000812:	f57f af46 	bpl.w	80006a2 <HAL_RCC_OscConfig+0xca>
 8000816:	e7a2      	b.n	800075e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800081c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000820:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000822:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000824:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000830:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000832:	f7ff fccd 	bl	80001d0 <HAL_GetTick>
 8000836:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000838:	e004      	b.n	8000844 <HAL_RCC_OscConfig+0x26c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800083a:	f7ff fcc9 	bl	80001d0 <HAL_GetTick>
 800083e:	1b80      	subs	r0, r0, r6
 8000840:	2864      	cmp	r0, #100	; 0x64
 8000842:	d814      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	039b      	lsls	r3, r3, #14
 8000848:	d4f7      	bmi.n	800083a <HAL_RCC_OscConfig+0x262>
 800084a:	e6fc      	b.n	8000646 <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800084c:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800084e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000854:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000856:	f7ff fcbb 	bl	80001d0 <HAL_GetTick>
 800085a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800085c:	6833      	ldr	r3, [r6, #0]
 800085e:	05da      	lsls	r2, r3, #23
 8000860:	f53f af35 	bmi.w	80006ce <HAL_RCC_OscConfig+0xf6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000864:	f7ff fcb4 	bl	80001d0 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2864      	cmp	r0, #100	; 0x64
 800086c:	d9f6      	bls.n	800085c <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 800086e:	2003      	movs	r0, #3
}
 8000870:	b002      	add	sp, #8
 8000872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000876:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800087a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800087e:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000880:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000882:	f022 0201 	bic.w	r2, r2, #1
 8000886:	621a      	str	r2, [r3, #32]
 8000888:	6a1a      	ldr	r2, [r3, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088e:	f022 0204 	bic.w	r2, r2, #4
 8000892:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8000894:	f7ff fc9c 	bl	80001d0 <HAL_GetTick>
 8000898:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800089a:	e012      	b.n	80008c2 <HAL_RCC_OscConfig+0x2ea>
 800089c:	40021000 	.word	0x40021000
 80008a0:	42420000 	.word	0x42420000
 80008a4:	40007000 	.word	0x40007000
 80008a8:	42420060 	.word	0x42420060
 80008ac:	42420480 	.word	0x42420480
 80008b0:	20000008 	.word	0x20000008
 80008b4:	10624dd3 	.word	0x10624dd3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b8:	f7ff fc8a 	bl	80001d0 <HAL_GetTick>
 80008bc:	1bc0      	subs	r0, r0, r7
 80008be:	4540      	cmp	r0, r8
 80008c0:	d8d5      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c2:	6a33      	ldr	r3, [r6, #32]
 80008c4:	0798      	lsls	r0, r3, #30
 80008c6:	d4f7      	bmi.n	80008b8 <HAL_RCC_OscConfig+0x2e0>
    if(pwrclkchanged == SET)
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	f43f af27 	beq.w	800071c <HAL_RCC_OscConfig+0x144>
 80008ce:	e01c      	b.n	800090a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_DISABLE();
 80008d0:	4a34      	ldr	r2, [pc, #208]	; (80009a4 <HAL_RCC_OscConfig+0x3cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008d2:	4d35      	ldr	r5, [pc, #212]	; (80009a8 <HAL_RCC_OscConfig+0x3d0>)
        __HAL_RCC_HSI_DISABLE();
 80008d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008d6:	f7ff fc7b 	bl	80001d0 <HAL_GetTick>
 80008da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008dc:	e004      	b.n	80008e8 <HAL_RCC_OscConfig+0x310>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008de:	f7ff fc77 	bl	80001d0 <HAL_GetTick>
 80008e2:	1b80      	subs	r0, r0, r6
 80008e4:	2802      	cmp	r0, #2
 80008e6:	d8c2      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	0799      	lsls	r1, r3, #30
 80008ec:	d4f7      	bmi.n	80008de <HAL_RCC_OscConfig+0x306>
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	e6d5      	b.n	800069e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f2:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <HAL_RCC_OscConfig+0x3d0>)
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e695      	b.n	800062a <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008fe:	4a2a      	ldr	r2, [pc, #168]	; (80009a8 <HAL_RCC_OscConfig+0x3d0>)
 8000900:	6a13      	ldr	r3, [r2, #32]
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6213      	str	r3, [r2, #32]
 8000908:	e6f4      	b.n	80006f4 <HAL_RCC_OscConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800090a:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <HAL_RCC_OscConfig+0x3d0>)
 800090c:	69d3      	ldr	r3, [r2, #28]
 800090e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000912:	61d3      	str	r3, [r2, #28]
 8000914:	e702      	b.n	800071c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_PLL_DISABLE();
 8000916:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000918:	f7ff fc5a 	bl	80001d0 <HAL_GetTick>
 800091c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800091e:	e004      	b.n	800092a <HAL_RCC_OscConfig+0x352>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000920:	f7ff fc56 	bl	80001d0 <HAL_GetTick>
 8000924:	1b80      	subs	r0, r0, r6
 8000926:	2802      	cmp	r0, #2
 8000928:	d8a1      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	0199      	lsls	r1, r3, #6
 800092e:	d4f7      	bmi.n	8000920 <HAL_RCC_OscConfig+0x348>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000930:	6a22      	ldr	r2, [r4, #32]
 8000932:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000936:	d02d      	beq.n	8000994 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_PLL_ENABLE();
 8000938:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_RCC_OscConfig+0x3d0>)
 800093c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800093e:	6859      	ldr	r1, [r3, #4]
 8000940:	4302      	orrs	r2, r0
 8000942:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000948:	430a      	orrs	r2, r1
 800094a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800094c:	6005      	str	r5, [r0, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800094e:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8000950:	f7ff fc3e 	bl	80001d0 <HAL_GetTick>
 8000954:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000956:	e004      	b.n	8000962 <HAL_RCC_OscConfig+0x38a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000958:	f7ff fc3a 	bl	80001d0 <HAL_GetTick>
 800095c:	1b40      	subs	r0, r0, r5
 800095e:	2802      	cmp	r0, #2
 8000960:	d885      	bhi.n	800086e <HAL_RCC_OscConfig+0x296>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	019a      	lsls	r2, r3, #6
 8000966:	d5f7      	bpl.n	8000958 <HAL_RCC_OscConfig+0x380>
 8000968:	e6f5      	b.n	8000756 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800096e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e652      	b.n	800062a <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000984:	f042 0204 	orr.w	r2, r2, #4
 8000988:	621a      	str	r2, [r3, #32]
 800098a:	6a1a      	ldr	r2, [r3, #32]
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	621a      	str	r2, [r3, #32]
 8000992:	e6af      	b.n	80006f4 <HAL_RCC_OscConfig+0x11c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000994:	686b      	ldr	r3, [r5, #4]
 8000996:	68a1      	ldr	r1, [r4, #8]
 8000998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800099c:	430b      	orrs	r3, r1
 800099e:	606b      	str	r3, [r5, #4]
 80009a0:	e7ca      	b.n	8000938 <HAL_RCC_OscConfig+0x360>
 80009a2:	bf00      	nop
 80009a4:	42420000 	.word	0x42420000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	42420060 	.word	0x42420060

080009b0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009b0:	4a65      	ldr	r2, [pc, #404]	; (8000b48 <HAL_RCC_ClockConfig+0x198>)
 80009b2:	6813      	ldr	r3, [r2, #0]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	428b      	cmp	r3, r1
 80009ba:	d20b      	bcs.n	80009d4 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	4299      	cmp	r1, r3
 80009ce:	d001      	beq.n	80009d4 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
}
 80009d2:	4770      	bx	lr
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009d8:	6803      	ldr	r3, [r0, #0]
{
 80009da:	b086      	sub	sp, #24
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009dc:	079a      	lsls	r2, r3, #30
 80009de:	d506      	bpl.n	80009ee <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009e0:	4c5a      	ldr	r4, [pc, #360]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
 80009e2:	6885      	ldr	r5, [r0, #8]
 80009e4:	6862      	ldr	r2, [r4, #4]
 80009e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009ea:	432a      	orrs	r2, r5
 80009ec:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009ee:	07db      	lsls	r3, r3, #31
 80009f0:	4606      	mov	r6, r0
 80009f2:	460c      	mov	r4, r1
 80009f4:	d524      	bpl.n	8000a40 <HAL_RCC_ClockConfig+0x90>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f6:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009fa:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fc:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009fe:	f000 8092 	beq.w	8000b26 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a02:	2a02      	cmp	r2, #2
 8000a04:	f000 8087 	beq.w	8000b16 <HAL_RCC_ClockConfig+0x166>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	0798      	lsls	r0, r3, #30
 8000a0a:	d529      	bpl.n	8000a60 <HAL_RCC_ClockConfig+0xb0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a0c:	4d4f      	ldr	r5, [pc, #316]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a12:	686b      	ldr	r3, [r5, #4]
 8000a14:	f023 0303 	bic.w	r3, r3, #3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a1c:	f7ff fbd8 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a20:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a22:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d065      	beq.n	8000af4 <HAL_RCC_ClockConfig+0x144>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d105      	bne.n	8000a38 <HAL_RCC_ClockConfig+0x88>
 8000a2c:	e06d      	b.n	8000b0a <HAL_RCC_ClockConfig+0x15a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2e:	f7ff fbcf 	bl	80001d0 <HAL_GetTick>
 8000a32:	1bc0      	subs	r0, r0, r7
 8000a34:	4540      	cmp	r0, r8
 8000a36:	d872      	bhi.n	8000b1e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a38:	686b      	ldr	r3, [r5, #4]
 8000a3a:	f013 0f0c 	tst.w	r3, #12
 8000a3e:	d1f6      	bne.n	8000a2e <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a40:	4a41      	ldr	r2, [pc, #260]	; (8000b48 <HAL_RCC_ClockConfig+0x198>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	d20d      	bcs.n	8000a68 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 0307 	bic.w	r3, r3, #7
 8000a52:	4323      	orrs	r3, r4
 8000a54:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	d003      	beq.n	8000a68 <HAL_RCC_ClockConfig+0xb8>
      return HAL_ERROR;
 8000a60:	2001      	movs	r0, #1
}
 8000a62:	b006      	add	sp, #24
 8000a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a68:	6833      	ldr	r3, [r6, #0]
 8000a6a:	0759      	lsls	r1, r3, #29
 8000a6c:	d506      	bpl.n	8000a7c <HAL_RCC_ClockConfig+0xcc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a6e:	4937      	ldr	r1, [pc, #220]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
 8000a70:	68f0      	ldr	r0, [r6, #12]
 8000a72:	684a      	ldr	r2, [r1, #4]
 8000a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000a78:	4302      	orrs	r2, r0
 8000a7a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a7c:	071a      	lsls	r2, r3, #28
 8000a7e:	d507      	bpl.n	8000a90 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a80:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
 8000a82:	6931      	ldr	r1, [r6, #16]
 8000a84:	6853      	ldr	r3, [r2, #4]
 8000a86:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a8e:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a90:	2601      	movs	r6, #1
 8000a92:	2502      	movs	r5, #2
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a94:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_RCC_ClockConfig+0x1a0>)
 8000a96:	af06      	add	r7, sp, #24
 8000a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9a:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000a9e:	4c2b      	ldr	r4, [pc, #172]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aa0:	f88d 6004 	strb.w	r6, [sp, #4]
 8000aa4:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 8000aa8:	6862      	ldr	r2, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000aaa:	f002 030c 	and.w	r3, r2, #12
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d10a      	bne.n	8000ac8 <HAL_RCC_ClockConfig+0x118>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ab2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8000ab6:	443b      	add	r3, r7
 8000ab8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000abc:	03d3      	lsls	r3, r2, #15
 8000abe:	d436      	bmi.n	8000b2e <HAL_RCC_ClockConfig+0x17e>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <HAL_RCC_ClockConfig+0x1a4>)
 8000ac2:	fb03 f301 	mul.w	r3, r3, r1
 8000ac6:	e000      	b.n	8000aca <HAL_RCC_ClockConfig+0x11a>
      sysclockfreq = HSE_VALUE;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <HAL_RCC_ClockConfig+0x1a8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aca:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <HAL_RCC_ClockConfig+0x19c>)
 8000acc:	4823      	ldr	r0, [pc, #140]	; (8000b5c <HAL_RCC_ClockConfig+0x1ac>)
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	4923      	ldr	r1, [pc, #140]	; (8000b60 <HAL_RCC_ClockConfig+0x1b0>)
 8000ad2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000ad6:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ad8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ade:	f7ff fb35 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ae2:	2000      	movs	r0, #0
}
 8000ae4:	b006      	add	sp, #24
 8000ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aea:	f7ff fb71 	bl	80001d0 <HAL_GetTick>
 8000aee:	1bc0      	subs	r0, r0, r7
 8000af0:	4540      	cmp	r0, r8
 8000af2:	d814      	bhi.n	8000b1e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000af4:	686b      	ldr	r3, [r5, #4]
 8000af6:	f003 030c 	and.w	r3, r3, #12
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d1f5      	bne.n	8000aea <HAL_RCC_ClockConfig+0x13a>
 8000afe:	e79f      	b.n	8000a40 <HAL_RCC_ClockConfig+0x90>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b00:	f7ff fb66 	bl	80001d0 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	4540      	cmp	r0, r8
 8000b08:	d809      	bhi.n	8000b1e <HAL_RCC_ClockConfig+0x16e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0a:	686b      	ldr	r3, [r5, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d1f5      	bne.n	8000b00 <HAL_RCC_ClockConfig+0x150>
 8000b14:	e794      	b.n	8000a40 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b16:	019d      	lsls	r5, r3, #6
 8000b18:	f53f af78 	bmi.w	8000a0c <HAL_RCC_ClockConfig+0x5c>
 8000b1c:	e7a0      	b.n	8000a60 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000b1e:	2003      	movs	r0, #3
}
 8000b20:	b006      	add	sp, #24
 8000b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b26:	039f      	lsls	r7, r3, #14
 8000b28:	f53f af70 	bmi.w	8000a0c <HAL_RCC_ClockConfig+0x5c>
 8000b2c:	e798      	b.n	8000a60 <HAL_RCC_ClockConfig+0xb0>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b2e:	6862      	ldr	r2, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_RCC_ClockConfig+0x1a8>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b32:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b36:	fb03 f301 	mul.w	r3, r3, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b3a:	443a      	add	r2, r7
 8000b3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b44:	e7c1      	b.n	8000aca <HAL_RCC_ClockConfig+0x11a>
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	08001f38 	.word	0x08001f38
 8000b54:	003d0900 	.word	0x003d0900
 8000b58:	007a1200 	.word	0x007a1200
 8000b5c:	08001f88 	.word	0x08001f88
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_RCC_GetSysClockFreq>:
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b66:	2601      	movs	r6, #1
 8000b68:	2502      	movs	r5, #2
{
 8000b6a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b6e:	f10d 0e18 	add.w	lr, sp, #24
 8000b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b74:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000b78:	4c13      	ldr	r4, [pc, #76]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x64>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b7a:	f88d 6004 	strb.w	r6, [sp, #4]
 8000b7e:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 8000b82:	6863      	ldr	r3, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b84:	f003 020c 	and.w	r2, r3, #12
 8000b88:	2a08      	cmp	r2, #8
 8000b8a:	d10b      	bne.n	8000ba4 <HAL_RCC_GetSysClockFreq+0x40>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b8c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000b90:	4472      	add	r2, lr
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b92:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b94:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b98:	d407      	bmi.n	8000baa <HAL_RCC_GetSysClockFreq+0x46>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x68>)
 8000b9c:	fb00 f002 	mul.w	r0, r0, r2
}
 8000ba0:	b006      	add	sp, #24
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x6c>)
}
 8000ba6:	b006      	add	sp, #24
 8000ba8:	bd70      	pop	{r4, r5, r6, pc}
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000baa:	6863      	ldr	r3, [r4, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bae:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bb2:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bb6:	4473      	add	r3, lr
 8000bb8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bbc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	08001f38 	.word	0x08001f38
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	003d0900 	.word	0x003d0900
 8000bd0:	007a1200 	.word	0x007a1200

08000bd4 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000bd4:	4b01      	ldr	r3, [pc, #4]	; (8000bdc <HAL_RCC_GetHCLKFreq+0x8>)
}
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000be2:	4905      	ldr	r1, [pc, #20]	; (8000bf8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000be4:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000be8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000bec:	5ccb      	ldrb	r3, [r1, r3]
 8000bee:	6810      	ldr	r0, [r2, #0]
}    
 8000bf0:	40d8      	lsrs	r0, r3
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08001f98 	.word	0x08001f98
 8000bfc:	20000008 	.word	0x20000008

08000c00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000c02:	4905      	ldr	r1, [pc, #20]	; (8000c18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c04:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c08:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c0c:	5ccb      	ldrb	r3, [r1, r3]
 8000c0e:	6810      	ldr	r0, [r2, #0]
} 
 8000c10:	40d8      	lsrs	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	08001f98 	.word	0x08001f98
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d04a      	beq.n	8000cba <HAL_TIM_PWM_Init+0x9a>
{
 8000c24:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000c26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c30:	b353      	cbz	r3, 8000c88 <HAL_TIM_PWM_Init+0x68>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000c32:	2302      	movs	r3, #2

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c34:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c36:	4922      	ldr	r1, [pc, #136]	; (8000cc0 <HAL_TIM_PWM_Init+0xa0>)
  htim->State= HAL_TIM_STATE_BUSY;
 8000c38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c3c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8000c3e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c40:	d027      	beq.n	8000c92 <HAL_TIM_PWM_Init+0x72>
 8000c42:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000c46:	d016      	beq.n	8000c76 <HAL_TIM_PWM_Init+0x56>
 8000c48:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	d012      	beq.n	8000c76 <HAL_TIM_PWM_Init+0x56>
 8000c50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000c54:	428a      	cmp	r2, r1
 8000c56:	d00e      	beq.n	8000c76 <HAL_TIM_PWM_Init+0x56>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c58:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c5a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c5c:	6861      	ldr	r1, [r4, #4]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c62:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8000c64:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c66:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c68:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000c6a:	2301      	movs	r3, #1
  return HAL_OK;
 8000c6c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8000c6e:	6153      	str	r3, [r2, #20]
  htim->State= HAL_TIM_STATE_READY;
 8000c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8000c76:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c7c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c7e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c84:	430b      	orrs	r3, r1
 8000c86:	e7e7      	b.n	8000c58 <HAL_TIM_PWM_Init+0x38>
    htim->Lock = HAL_UNLOCKED;
 8000c88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000c8c:	f001 f828 	bl	8001ce0 <HAL_TIM_PWM_MspInit>
 8000c90:	e7cf      	b.n	8000c32 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8000c92:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c98:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c9a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ca0:	430b      	orrs	r3, r1
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000ca2:	69a1      	ldr	r1, [r4, #24]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000ca8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8000caa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000cac:	68e3      	ldr	r3, [r4, #12]
 8000cae:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000cb0:	6863      	ldr	r3, [r4, #4]
 8000cb2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8000cb4:	6963      	ldr	r3, [r4, #20]
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	e7d7      	b.n	8000c6a <HAL_TIM_PWM_Init+0x4a>
    return HAL_ERROR;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40012c00 	.word	0x40012c00

08000cc4 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d07e      	beq.n	8000dc6 <HAL_TIM_Encoder_Init+0x102>
{
 8000cc8:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ccc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d05b      	beq.n	8000d94 <HAL_TIM_Encoder_Init+0xd0>
  htim->State= HAL_TIM_STATE_BUSY;
 8000cdc:	2202      	movs	r2, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000cde:	682b      	ldr	r3, [r5, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ce0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ce4:	689a      	ldr	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ce6:	4939      	ldr	r1, [pc, #228]	; (8000dcc <HAL_TIM_Encoder_Init+0x108>)
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ce8:	f022 0207 	bic.w	r2, r2, #7
 8000cec:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cee:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8000cf0:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cf2:	d054      	beq.n	8000d9e <HAL_TIM_Encoder_Init+0xda>
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d043      	beq.n	8000d82 <HAL_TIM_Encoder_Init+0xbe>
 8000cfa:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d03f      	beq.n	8000d82 <HAL_TIM_Encoder_Init+0xbe>
 8000d02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d03b      	beq.n	8000d82 <HAL_TIM_Encoder_Init+0xbe>
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d0a:	69ae      	ldr	r6, [r5, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d0c:	68e8      	ldr	r0, [r5, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d0e:	6869      	ldr	r1, [r5, #4]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d14:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8000d16:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d18:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d1a:	6299      	str	r1, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8000d20:	f8d3 e008 	ldr.w	lr, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8000d24:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000d26:	68a0      	ldr	r0, [r4, #8]
 8000d28:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8000d2a:	f427 7740 	bic.w	r7, r7, #768	; 0x300
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000d2e:	6922      	ldr	r2, [r4, #16]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8000d30:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8000d34:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 8000d38:	4339      	orrs	r1, r7
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000d3a:	69e7      	ldr	r7, [r4, #28]
 8000d3c:	68e0      	ldr	r0, [r4, #12]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8000d44:	f8d4 a020 	ldr.w	sl, [r4, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000d48:	f8d4 9014 	ldr.w	r9, [r4, #20]
  tmpccer = htim->Instance->CCER;
 8000d4c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000d4e:	4302      	orrs	r2, r0
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000d50:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8000d52:	f8d4 c000 	ldr.w	ip, [r4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000d56:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000d5a:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8000d5e:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000d62:	ea42 320a 	orr.w	r2, r2, sl, lsl #12
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8000d66:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8000d6a:	4307      	orrs	r7, r0
  tmpsmcr |= sConfig->EncoderMode;
 8000d6c:	ea4e 040c 	orr.w	r4, lr, ip
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8000d70:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8000d72:	609c      	str	r4, [r3, #8]
  return HAL_OK;
 8000d74:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 8000d76:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8000d78:	621f      	str	r7, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 8000d7a:	f885 603d 	strb.w	r6, [r5, #61]	; 0x3d
  return HAL_OK;
 8000d7e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
    tmpcr1 |= Structure->CounterMode;
 8000d82:	68a9      	ldr	r1, [r5, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d88:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d8a:	6929      	ldr	r1, [r5, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d90:	430a      	orrs	r2, r1
 8000d92:	e7ba      	b.n	8000d0a <HAL_TIM_Encoder_Init+0x46>
    htim->Lock = HAL_UNLOCKED;
 8000d94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8000d98:	f000 ffb8 	bl	8001d0c <HAL_TIM_Encoder_MspInit>
 8000d9c:	e79e      	b.n	8000cdc <HAL_TIM_Encoder_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 8000d9e:	68a9      	ldr	r1, [r5, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000da0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000da4:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000da6:	6929      	ldr	r1, [r5, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000da8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dac:	430a      	orrs	r2, r1
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000dae:	69a9      	ldr	r1, [r5, #24]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000db4:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8000db6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000db8:	68ea      	ldr	r2, [r5, #12]
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000dbc:	686a      	ldr	r2, [r5, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8000dc0:	696a      	ldr	r2, [r5, #20]
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc4:	e7aa      	b.n	8000d1c <HAL_TIM_Encoder_Init+0x58>
    return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00

08000dd0 <HAL_TIM_Encoder_Start>:
  switch (Channel)
 8000dd0:	b1d1      	cbz	r1, 8000e08 <HAL_TIM_Encoder_Start+0x38>
 8000dd2:	2904      	cmp	r1, #4
 8000dd4:	d016      	beq.n	8000e04 <HAL_TIM_Encoder_Start+0x34>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000dd6:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000de0:	6a1a      	ldr	r2, [r3, #32]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	f022 0210 	bic.w	r2, r2, #16
 8000dee:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	f042 0210 	orr.w	r2, r2, #16
 8000df6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8000df8:	681a      	ldr	r2, [r3, #0]
}
 8000dfa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8000dfc:	f042 0201 	orr.w	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	4770      	bx	lr
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8000e04:	6803      	ldr	r3, [r0, #0]
 8000e06:	e7ef      	b.n	8000de8 <HAL_TIM_Encoder_Start+0x18>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8000e08:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000e12:	6a1a      	ldr	r2, [r3, #32]
 8000e14:	f042 0201 	orr.w	r2, r2, #1
 8000e18:	621a      	str	r2, [r3, #32]
 8000e1a:	e7ed      	b.n	8000df8 <HAL_TIM_Encoder_Start+0x28>

08000e1c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8000e1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d043      	beq.n	8000eac <HAL_TIM_PWM_ConfigChannel+0x90>
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8000e26:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8000e28:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000e2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000e2e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  switch (Channel)
 8000e32:	2a0c      	cmp	r2, #12
 8000e34:	d832      	bhi.n	8000e9c <HAL_TIM_PWM_ConfigChannel+0x80>
 8000e36:	e8df f002 	tbb	[pc, r2]
 8000e3a:	3165      	.short	0x3165
 8000e3c:	31073131 	.word	0x31073131
 8000e40:	318e3131 	.word	0x318e3131
 8000e44:	3131      	.short	0x3131
 8000e46:	3b          	.byte	0x3b
 8000e47:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000e48:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e4a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e4c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e4e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e50:	f025 0510 	bic.w	r5, r5, #16
 8000e54:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8000e56:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000e58:	4d6c      	ldr	r5, [pc, #432]	; (800100c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  tmpcr2 =  TIMx->CR2;
 8000e5a:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8000e5e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8000e60:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000e64:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000e68:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e6a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e6e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000e72:	f000 80ae 	beq.w	8000fd2 <HAL_TIM_PWM_ConfigChannel+0x1b6>
  TIMx->CCR2 = OC_Config->Pulse;
 8000e76:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000e78:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e7c:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000e7e:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000e80:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e82:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000e84:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e86:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000e8a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000e8c:	6999      	ldr	r1, [r3, #24]
 8000e8e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000e92:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000e9a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8000e9c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e9e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8000ea0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8000ea4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8000eac:	2002      	movs	r0, #2
 8000eae:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000eb0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000eb2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000eb4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000eb6:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000eb8:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8000ebc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8000ebe:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ec0:	4d52      	ldr	r5, [pc, #328]	; (800100c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  tmpcr2 =  TIMx->CR2;
 8000ec2:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000ec6:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8000ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000ecc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ed0:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ed2:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ed6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000eda:	d065      	beq.n	8000fa8 <HAL_TIM_PWM_ConfigChannel+0x18c>
  TIMx->CCR4 = OC_Config->Pulse;
 8000edc:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000ede:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000ee2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000ee4:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8000ee6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000ee8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000eea:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000eec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000ef0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000ef2:	69d9      	ldr	r1, [r3, #28]
 8000ef4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000ef8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000f00:	61da      	str	r2, [r3, #28]
    break;
 8000f02:	e7cb      	b.n	8000e9c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000f04:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8000f06:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f08:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8000f0a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f0c:	f025 0501 	bic.w	r5, r5, #1
 8000f10:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8000f12:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f14:	4d3d      	ldr	r5, [pc, #244]	; (800100c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  tmpcr2 =  TIMx->CR2;
 8000f16:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8000f1a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8000f1c:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f20:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f24:	42ab      	cmp	r3, r5
  tmpccer |= OC_Config->OCPolarity;
 8000f26:	ea42 0207 	orr.w	r2, r2, r7
  tmpccmrx |= OC_Config->OCMode;
 8000f2a:	ea44 0406 	orr.w	r4, r4, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f2e:	d05f      	beq.n	8000ff0 <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CCR1 = OC_Config->Pulse;
 8000f30:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000f32:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000f36:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000f38:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8000f3a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000f3c:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000f3e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000f40:	f044 0408 	orr.w	r4, r4, #8
 8000f44:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000f46:	6999      	ldr	r1, [r3, #24]
 8000f48:	f021 0104 	bic.w	r1, r1, #4
 8000f4c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	432a      	orrs	r2, r5
 8000f52:	619a      	str	r2, [r3, #24]
    break;
 8000f54:	e7a2      	b.n	8000e9c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000f56:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f58:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f5a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8000f5c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f5e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8000f62:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8000f64:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f66:	4d29      	ldr	r5, [pc, #164]	; (800100c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  tmpcr2 =  TIMx->CR2;
 8000f68:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8000f6c:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8000f6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f72:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f76:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f78:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8000f7c:	ea44 0406 	orr.w	r4, r4, r6
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f80:	d018      	beq.n	8000fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
  TIMx->CCR3 = OC_Config->Pulse;
 8000f82:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000f84:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000f88:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000f8a:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8000f8c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000f8e:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000f90:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000f92:	f044 0408 	orr.w	r4, r4, #8
 8000f96:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000f98:	69d9      	ldr	r1, [r3, #28]
 8000f9a:	f021 0104 	bic.w	r1, r1, #4
 8000f9e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	432a      	orrs	r2, r5
 8000fa4:	61da      	str	r2, [r3, #28]
    break;
 8000fa6:	e779      	b.n	8000e9c <HAL_TIM_PWM_ConfigChannel+0x80>
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000fa8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000faa:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000fae:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8000fb2:	e793      	b.n	8000edc <HAL_TIM_PWM_ConfigChannel+0xc0>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000fb4:	694f      	ldr	r7, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fb6:	698d      	ldr	r5, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000fb8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000fbe:	f42e 5e40 	bic.w	lr, lr, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000fc2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fc6:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8000fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fcc:	ea4e 1e05 	orr.w	lr, lr, r5, lsl #4
 8000fd0:	e7d7      	b.n	8000f82 <HAL_TIM_PWM_ConfigChannel+0x166>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000fd2:	694f      	ldr	r7, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000fd4:	698d      	ldr	r5, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fd6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000fdc:	f42e 6e40 	bic.w	lr, lr, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fe0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000fe4:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8000fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000fea:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 8000fee:	e742      	b.n	8000e76 <HAL_TIM_PWM_ConfigChannel+0x5a>
    tmpccer |= OC_Config->OCNPolarity;
 8000ff0:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ff2:	694d      	ldr	r5, [r1, #20]
 8000ff4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000ff6:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000ffa:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8000ffe:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8001000:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001002:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001006:	ea45 0e0e 	orr.w	lr, r5, lr
 800100a:	e791      	b.n	8000f30 <HAL_TIM_PWM_ConfigChannel+0x114>
 800100c:	40012c00 	.word	0x40012c00

08001010 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001010:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001014:	2b01      	cmp	r3, #1
 8001016:	d022      	beq.n	800105e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8001018:	4602      	mov	r2, r0
{
 800101a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800101c:	2400      	movs	r4, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800101e:	68cb      	ldr	r3, [r1, #12]
 8001020:	6888      	ldr	r0, [r1, #8]
 8001022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001026:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001028:	6848      	ldr	r0, [r1, #4]
 800102a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800102e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001030:	6808      	ldr	r0, [r1, #0]
 8001032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001036:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001038:	6908      	ldr	r0, [r1, #16]
 800103a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800103e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001040:	6948      	ldr	r0, [r1, #20]
 8001042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001046:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001048:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800104a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  htim->Instance->BDTR = tmpbdtr;
 800104e:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001050:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 8001052:	644b      	str	r3, [r1, #68]	; 0x44

  return HAL_OK;
 8001054:	4620      	mov	r0, r4
  __HAL_UNLOCK(htim);
 8001056:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
}
 800105a:	bc10      	pop	{r4}
 800105c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800105e:	2002      	movs	r0, #2
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001064:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d01f      	beq.n	80010ac <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800106c:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 800106e:	2002      	movs	r0, #2
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001072:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8001074:	2601      	movs	r6, #1
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001076:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001078:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800107c:	685c      	ldr	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800107e:	f8d1 e000 	ldr.w	lr, [r1]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001082:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001086:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001088:	6858      	ldr	r0, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800108a:	684f      	ldr	r7, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800108c:	ea40 000e 	orr.w	r0, r0, lr
 8001090:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001092:	689c      	ldr	r4, [r3, #8]

  return HAL_OK;
 8001094:	4628      	mov	r0, r5
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001096:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800109a:	609c      	str	r4, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800109c:	6899      	ldr	r1, [r3, #8]
 800109e:	4339      	orrs	r1, r7
 80010a0:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80010a2:	f882 603d 	strb.w	r6, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80010a6:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  return HAL_OK;
 80010aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80010ac:	2002      	movs	r0, #2
 80010ae:	4770      	bx	lr

080010b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b6:	6804      	ldr	r4, [r0, #0]
 80010b8:	68c1      	ldr	r1, [r0, #12]
 80010ba:	6922      	ldr	r2, [r4, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010bc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80010c2:	430a      	orrs	r2, r1
 80010c4:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80010c6:	68e2      	ldr	r2, [r4, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010c8:	6900      	ldr	r0, [r0, #16]
 80010ca:	f8da 1014 	ldr.w	r1, [sl, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80010ce:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010d2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80010d4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010d8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80010da:	4313      	orrs	r3, r2
 80010dc:	60e3      	str	r3, [r4, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010de:	6963      	ldr	r3, [r4, #20]
 80010e0:	f8da 1018 	ldr.w	r1, [sl, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <UART_SetConfig+0x17c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010ea:	430b      	orrs	r3, r1
  if(huart->Instance == USART1)
 80010ec:	4294      	cmp	r4, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010ee:	6163      	str	r3, [r4, #20]
  if(huart->Instance == USART1)
 80010f0:	d059      	beq.n	80011a6 <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010f2:	f7ff fd75 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>
 80010f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80010fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fbb0 f3f3 	udiv	r3, r0, r3
 8001108:	4f49      	ldr	r7, [pc, #292]	; (8001230 <UART_SetConfig+0x180>)
 800110a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800110e:	fba7 2303 	umull	r2, r3, r7, r3
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	011d      	lsls	r5, r3, #4
 8001116:	f7ff fd63 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>
 800111a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800111e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001122:	0093      	lsls	r3, r2, #2
 8001124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001128:	fbb0 f6f3 	udiv	r6, r0, r3
 800112c:	f7ff fd58 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>
 8001130:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001134:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001138:	0093      	lsls	r3, r2, #2
 800113a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800113e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001142:	fba7 2303 	umull	r2, r3, r7, r3
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	fb08 6313 	mls	r3, r8, r3, r6
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	3332      	adds	r3, #50	; 0x32
 8001150:	fba7 2303 	umull	r2, r3, r7, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800115a:	f7ff fd41 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>
 800115e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001162:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800116a:	0093      	lsls	r3, r2, #2
 800116c:	fbb0 f9f3 	udiv	r9, r0, r3
 8001170:	f7ff fd36 	bl	8000be0 <HAL_RCC_GetPCLK1Freq>
 8001174:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001178:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800117c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fbb0 f3f3 	udiv	r3, r0, r3
 8001186:	fba7 2303 	umull	r2, r3, r7, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	fb08 9313 	mls	r3, r8, r3, r9
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	3332      	adds	r3, #50	; 0x32
 8001194:	fba7 2303 	umull	r2, r3, r7, r3
 8001198:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800119c:	4333      	orrs	r3, r6
 800119e:	442b      	add	r3, r5
 80011a0:	60a3      	str	r3, [r4, #8]
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011a6:	f7ff fd2b 	bl	8000c00 <HAL_RCC_GetPCLK2Freq>
 80011aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 80011ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011bc:	4f1c      	ldr	r7, [pc, #112]	; (8001230 <UART_SetConfig+0x180>)
 80011be:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011c2:	fba7 2303 	umull	r2, r3, r7, r3
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	011d      	lsls	r5, r3, #4
 80011ca:	f7ff fd19 	bl	8000c00 <HAL_RCC_GetPCLK2Freq>
 80011ce:	f8da 2004 	ldr.w	r2, [sl, #4]
 80011d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011d6:	0093      	lsls	r3, r2, #2
 80011d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011dc:	fbb0 f6f3 	udiv	r6, r0, r3
 80011e0:	f7ff fd0e 	bl	8000c00 <HAL_RCC_GetPCLK2Freq>
 80011e4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80011e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011ec:	0093      	lsls	r3, r2, #2
 80011ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f6:	fba7 2303 	umull	r2, r3, r7, r3
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	fb08 6313 	mls	r3, r8, r3, r6
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	3332      	adds	r3, #50	; 0x32
 8001204:	fba7 2303 	umull	r2, r3, r7, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800120e:	f7ff fcf7 	bl	8000c00 <HAL_RCC_GetPCLK2Freq>
 8001212:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800121a:	0093      	lsls	r3, r2, #2
 800121c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001220:	fbb0 f9f3 	udiv	r9, r0, r3
 8001224:	f7ff fcec 	bl	8000c00 <HAL_RCC_GetPCLK2Freq>
 8001228:	e7a4      	b.n	8001174 <UART_SetConfig+0xc4>
 800122a:	bf00      	nop
 800122c:	40013800 	.word	0x40013800
 8001230:	51eb851f 	.word	0x51eb851f

08001234 <HAL_UART_Init>:
  if(huart == NULL)
 8001234:	b360      	cbz	r0, 8001290 <HAL_UART_Init+0x5c>
{
 8001236:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001238:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800123c:	4604      	mov	r4, r0
 800123e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001242:	b303      	cbz	r3, 8001286 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001244:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001246:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800124c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800124e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001254:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001256:	f7ff ff2b 	bl	80010b0 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800125a:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 800125c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800125e:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001260:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001270:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001278:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800127a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800127c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001280:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
  return HAL_OK;
 8001284:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001286:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800128a:	f000 fdd1 	bl	8001e30 <HAL_UART_MspInit>
 800128e:	e7d9      	b.n	8001244 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8001290:	2001      	movs	r0, #1
 8001292:	4770      	bx	lr

08001294 <Get_us>:
 */

#include "delay_us.h"

uint32_t Get_us(void)
{
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8001296:	f7ff fc65 	bl	8000b64 <HAL_RCC_GetSysClockFreq>
 800129a:	4f0b      	ldr	r7, [pc, #44]	; (80012c8 <Get_us+0x34>)
	register uint32_t ms, cycle_cnt;
	do
	{
		ms = HAL_GetTick();
		cycle_cnt = SysTick->VAL;
 800129c:	4e0b      	ldr	r6, [pc, #44]	; (80012cc <Get_us+0x38>)
	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 800129e:	fba7 3700 	umull	r3, r7, r7, r0
 80012a2:	0cbf      	lsrs	r7, r7, #18
		ms = HAL_GetTick();
 80012a4:	f7fe ff94 	bl	80001d0 <HAL_GetTick>
		cycle_cnt = SysTick->VAL;
 80012a8:	68b5      	ldr	r5, [r6, #8]
		ms = HAL_GetTick();
 80012aa:	4604      	mov	r4, r0
	} while (ms != HAL_GetTick());
 80012ac:	f7fe ff90 	bl	80001d0 <HAL_GetTick>
 80012b0:	4284      	cmp	r4, r0
 80012b2:	d1f7      	bne.n	80012a4 <Get_us+0x10>
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80012b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b8:	fb00 f307 	mul.w	r3, r0, r7
 80012bc:	1b5d      	subs	r5, r3, r5
 80012be:	fbb5 f7f7 	udiv	r7, r5, r7
}
 80012c2:	fb00 7004 	mla	r0, r0, r4, r7
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_GPIO_Init+0x50>)
{
 80012d2:	b084      	sub	sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	f042 0210 	orr.w	r2, r2, #16
 80012da:	619a      	str	r2, [r3, #24]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	f002 0210 	and.w	r2, r2, #16
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	699a      	ldr	r2, [r3, #24]
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	f002 0220 	and.w	r2, r2, #32
 80012f4:	9201      	str	r2, [sp, #4]
 80012f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	f042 0204 	orr.w	r2, r2, #4
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	f002 0204 	and.w	r2, r2, #4
 8001306:	9202      	str	r2, [sp, #8]
 8001308:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	f042 0208 	orr.w	r2, r2, #8
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	9303      	str	r3, [sp, #12]
 800131a:	9b03      	ldr	r3, [sp, #12]

}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000

08001324 <MX_I2C1_Init>:
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001324:	2200      	movs	r2, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
{
 800132a:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_I2C1_Init+0x38>)
 800132e:	4d0c      	ldr	r5, [pc, #48]	; (8001360 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001330:	4c0c      	ldr	r4, [pc, #48]	; (8001364 <MX_I2C1_Init+0x40>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	621a      	str	r2, [r3, #32]
  hi2c1.Instance = I2C1;
 8001340:	601d      	str	r5, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001342:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	6119      	str	r1, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001346:	f7ff f8b9 	bl	80004bc <HAL_I2C_Init>
 800134a:	b900      	cbnz	r0, 800134e <MX_I2C1_Init+0x2a>
 800134c:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 800134e:	2142      	movs	r1, #66	; 0x42
  }

}
 8001350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_I2C1_Init+0x44>)
 8001356:	f000 b93d 	b.w	80015d4 <_Error_Handler>
 800135a:	bf00      	nop
 800135c:	20000060 	.word	0x20000060
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0
 8001368:	08001f48 	.word	0x08001f48

0800136c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800136c:	6802      	ldr	r2, [r0, #0]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_I2C_MspInit+0x4c>)
 8001370:	429a      	cmp	r2, r3
 8001372:	d000      	beq.n	8001376 <HAL_I2C_MspInit+0xa>
 8001374:	4770      	bx	lr
{
 8001376:	b510      	push	{r4, lr}
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2212      	movs	r2, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800137c:	f44f 7440 	mov.w	r4, #768	; 0x300
{
 8001380:	b086      	sub	sp, #24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	a902      	add	r1, sp, #8
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <HAL_I2C_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001388:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800138a:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f7fe ff96 	bl	80002bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001390:	490b      	ldr	r1, [pc, #44]	; (80013c0 <HAL_I2C_MspInit+0x54>)

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_I2C_MspInit+0x58>)
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001394:	684b      	ldr	r3, [r1, #4]
 8001396:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	604b      	str	r3, [r1, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a0:	69d3      	ldr	r3, [r2, #28]
 80013a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	69d3      	ldr	r3, [r2, #28]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013b2:	b006      	add	sp, #24
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40021000 	.word	0x40021000

080013c8 <Motor_X_Config>:

/* USER CODE BEGIN 0 */
void Motor_X_Config(void)
{
	Motor_X.Port = GPIOA;
	Motor_X.Limit_Pin = GPIO_PIN_4;
 80013c8:	2210      	movs	r2, #16
	Motor_X.Pin_0 = GPIO_PIN_0;
	Motor_X.Pin_1 = GPIO_PIN_1;
	Motor_X.Pin_2 = GPIO_PIN_2;
	Motor_X.Pin_3 = GPIO_PIN_3;

	Motor_X.Limit_Pin_Logic=RESET;//low when pressed
 80013ca:	2100      	movs	r1, #0
{
 80013cc:	b4f0      	push	{r4, r5, r6, r7}
	Motor_X.Pin_0 = GPIO_PIN_0;
 80013ce:	2701      	movs	r7, #1
	Motor_X.Pin_1 = GPIO_PIN_1;
 80013d0:	2602      	movs	r6, #2
	Motor_X.Pin_2 = GPIO_PIN_2;
 80013d2:	2504      	movs	r5, #4
	Motor_X.Pin_3 = GPIO_PIN_3;
 80013d4:	2408      	movs	r4, #8
	Motor_X.Port = GPIOA;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <Motor_X_Config+0x2c>)
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <Motor_X_Config+0x30>)
	Motor_X.Limit_Pin = GPIO_PIN_4;
 80013da:	819a      	strh	r2, [r3, #12]

	Motor_X.RPM = 10;
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <Motor_X_Config+0x34>)
	Motor_X.Limit_Pin_Logic=RESET;//low when pressed
 80013de:	7399      	strb	r1, [r3, #14]
	Motor_X.Port = GPIOA;
 80013e0:	6018      	str	r0, [r3, #0]
	Motor_X.Pin_0 = GPIO_PIN_0;
 80013e2:	809f      	strh	r7, [r3, #4]
	Motor_X.Pin_1 = GPIO_PIN_1;
 80013e4:	80de      	strh	r6, [r3, #6]
	Motor_X.Pin_2 = GPIO_PIN_2;
 80013e6:	811d      	strh	r5, [r3, #8]
	Motor_X.Pin_3 = GPIO_PIN_3;
 80013e8:	815c      	strh	r4, [r3, #10]
	Motor_X.Steps_For_360 = 4096;

	Motor_28BYJ_Init(&Motor_X);
 80013ea:	4618      	mov	r0, r3
}
 80013ec:	bcf0      	pop	{r4, r5, r6, r7}
	Motor_X.RPM = 10;
 80013ee:	611a      	str	r2, [r3, #16]
	Motor_28BYJ_Init(&Motor_X);
 80013f0:	f000 b8f2 	b.w	80015d8 <Motor_28BYJ_Init>
 80013f4:	200000b4 	.word	0x200000b4
 80013f8:	40010800 	.word	0x40010800
 80013fc:	1000000a 	.word	0x1000000a

08001400 <Motor_Y_Config>:
}

void Motor_Y_Config(void)
{
	Motor_Y.Port = GPIOB;
	Motor_Y.Limit_Pin = GPIO_PIN_11;
 8001400:	f44f 6200 	mov.w	r2, #2048	; 0x800
	Motor_Y.Pin_0 = GPIO_PIN_12;
	Motor_Y.Pin_1 = GPIO_PIN_13;
	Motor_Y.Pin_2 = GPIO_PIN_14;
	Motor_Y.Pin_3 = GPIO_PIN_15;

	Motor_Y.Limit_Pin_Logic=RESET;//low when pressed
 8001404:	2100      	movs	r1, #0
{
 8001406:	b4f0      	push	{r4, r5, r6, r7}
	Motor_Y.Pin_0 = GPIO_PIN_12;
 8001408:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	Motor_Y.Pin_1 = GPIO_PIN_13;
 800140c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	Motor_Y.Pin_2 = GPIO_PIN_14;
 8001410:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	Motor_Y.Pin_3 = GPIO_PIN_15;
 8001414:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	Motor_Y.Port = GPIOB;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <Motor_Y_Config+0x38>)
 800141a:	4808      	ldr	r0, [pc, #32]	; (800143c <Motor_Y_Config+0x3c>)
	Motor_Y.Limit_Pin = GPIO_PIN_11;
 800141c:	819a      	strh	r2, [r3, #12]

	Motor_Y.RPM = 10;
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <Motor_Y_Config+0x40>)
	Motor_Y.Limit_Pin_Logic=RESET;//low when pressed
 8001420:	7399      	strb	r1, [r3, #14]
	Motor_Y.Port = GPIOB;
 8001422:	6018      	str	r0, [r3, #0]
	Motor_Y.Pin_0 = GPIO_PIN_12;
 8001424:	809f      	strh	r7, [r3, #4]
	Motor_Y.Pin_1 = GPIO_PIN_13;
 8001426:	80de      	strh	r6, [r3, #6]
	Motor_Y.Pin_2 = GPIO_PIN_14;
 8001428:	811d      	strh	r5, [r3, #8]
	Motor_Y.Pin_3 = GPIO_PIN_15;
 800142a:	815c      	strh	r4, [r3, #10]
	Motor_Y.Steps_For_360 = 4096;

	Motor_28BYJ_Init(&Motor_Y);
 800142c:	4618      	mov	r0, r3
}
 800142e:	bcf0      	pop	{r4, r5, r6, r7}
	Motor_Y.RPM = 10;
 8001430:	611a      	str	r2, [r3, #16]
	Motor_28BYJ_Init(&Motor_Y);
 8001432:	f000 b8d1 	b.w	80015d8 <Motor_28BYJ_Init>
 8001436:	bf00      	nop
 8001438:	20000108 	.word	0x20000108
 800143c:	40010c00 	.word	0x40010c00
 8001440:	1000000a 	.word	0x1000000a

08001444 <Motor_Z_Config>:
}



void Motor_Z_Config(void)
{
 8001444:	b470      	push	{r4, r5, r6}
	Motor_Z.Limit_Pin = GPIO_PIN_2;
	Motor_Z.DIR_Pin   = GPIO_PIN_0;
	Motor_Z.STP_Pin   = GPIO_PIN_1;
	Motor_Z.EN_Pin    = GPIO_PIN_10;

	Motor_Z.Limit_Pin_Logic=RESET;//low when pressed
 8001446:	2600      	movs	r6, #0
	Motor_Z.Port      = GPIOB;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <Motor_Z_Config+0x24>)
 800144a:	4d08      	ldr	r5, [pc, #32]	; (800146c <Motor_Z_Config+0x28>)
	Motor_Z.STP_Pin   = GPIO_PIN_1;
 800144c:	4c08      	ldr	r4, [pc, #32]	; (8001470 <Motor_Z_Config+0x2c>)
 800144e:	4909      	ldr	r1, [pc, #36]	; (8001474 <Motor_Z_Config+0x30>)
	Motor_Z.RPM = 100;
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <Motor_Z_Config+0x34>)
	Motor_Z.Limit_Pin_Logic=RESET;//low when pressed
 8001452:	731e      	strb	r6, [r3, #12]
	Motor_Z.Port      = GPIOB;
 8001454:	601d      	str	r5, [r3, #0]
	Motor_Z.STP_Pin   = GPIO_PIN_1;
 8001456:	605c      	str	r4, [r3, #4]
	Motor_Z.Steps_For_360 = 200*16;//

	Motor_A4988_Init(&Motor_Z);
 8001458:	4618      	mov	r0, r3
}
 800145a:	bc70      	pop	{r4, r5, r6}
	Motor_Z.STP_Pin   = GPIO_PIN_1;
 800145c:	6099      	str	r1, [r3, #8]
	Motor_Z.RPM = 100;
 800145e:	f8c3 200e 	str.w	r2, [r3, #14]
	Motor_A4988_Init(&Motor_Z);
 8001462:	f000 b9eb 	b.w	800183c <Motor_A4988_Init>
 8001466:	bf00      	nop
 8001468:	200000e0 	.word	0x200000e0
 800146c:	40010c00 	.word	0x40010c00
 8001470:	00010002 	.word	0x00010002
 8001474:	00040400 	.word	0x00040400
 8001478:	0c800064 	.word	0x0c800064

0800147c <HAL_SYSTICK_Callback>:
	Motor_A4988_Enable(&Motor_Z);
}


void HAL_SYSTICK_Callback()
{
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001482:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001488:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8001490:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001494:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001496:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800149c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014a0:	910f      	str	r1, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f7ff f899 	bl	80005d8 <HAL_RCC_OscConfig>
 80014a6:	b100      	cbz	r0, 80014aa <SystemClock_Config+0x2a>
 80014a8:	e7fe      	b.n	80014a8 <SystemClock_Config+0x28>
 80014aa:	4603      	mov	r3, r0
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b2:	4621      	mov	r1, r4
 80014b4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014be:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	f7ff fa76 	bl	80009b0 <HAL_RCC_ClockConfig>
 80014c4:	4604      	mov	r4, r0
 80014c6:	b100      	cbz	r0, 80014ca <SystemClock_Config+0x4a>
 80014c8:	e7fe      	b.n	80014c8 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014ca:	f7ff fb83 	bl	8000bd4 <HAL_RCC_GetHCLKFreq>
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SystemClock_Config+0x70>)
 80014d0:	fba3 3000 	umull	r3, r0, r3, r0
 80014d4:	0980      	lsrs	r0, r0, #6
 80014d6:	f7fe fec9 	bl	800026c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014da:	2004      	movs	r0, #4
 80014dc:	f7fe fede 	bl	800029c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014e0:	4622      	mov	r2, r4
 80014e2:	4621      	mov	r1, r4
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e8:	f7fe fe8a 	bl	8000200 <HAL_NVIC_SetPriority>
}
 80014ec:	b011      	add	sp, #68	; 0x44
 80014ee:	bd30      	pop	{r4, r5, pc}
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <main>:
{
 80014f4:	b580      	push	{r7, lr}
  HAL_Init();
 80014f6:	f7fe fe4d 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80014fa:	f7ff ffc1 	bl	8001480 <SystemClock_Config>
  MX_GPIO_Init();
 80014fe:	f7ff fee7 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001502:	f000 fbb7 	bl	8001c74 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001506:	f000 fb7f 	bl	8001c08 <MX_TIM3_Init>
  MX_TIM2_Init();
 800150a:	f000 fb49 	bl	8001ba0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800150e:	f000 fc6f 	bl	8001df0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001512:	f7ff ff07 	bl	8001324 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001516:	f000 facd 	bl	8001ab4 <MX_TIM1_Init>
	Motor_X_Config();
 800151a:	f7ff ff55 	bl	80013c8 <Motor_X_Config>
	Motor_Y_Config();
 800151e:	f7ff ff6f 	bl	8001400 <Motor_Y_Config>
	Motor_Z_Config();
 8001522:	f7ff ff8f 	bl	8001444 <Motor_Z_Config>
	Motor_28BYJ_Set_RPM(&Motor_X, RPM);
 8001526:	2105      	movs	r1, #5
 8001528:	4821      	ldr	r0, [pc, #132]	; (80015b0 <main+0xbc>)
 800152a:	f000 f8fd 	bl	8001728 <Motor_28BYJ_Set_RPM>
	Motor_28BYJ_Set_RPM(&Motor_Y, RPM);
 800152e:	2105      	movs	r1, #5
 8001530:	4820      	ldr	r0, [pc, #128]	; (80015b4 <main+0xc0>)
 8001532:	f000 f8f9 	bl	8001728 <Motor_28BYJ_Set_RPM>
	Motor_A4988_Set_RPM(&Motor_Z, RPM);
 8001536:	2105      	movs	r1, #5
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <main+0xc4>)
 800153a:	f000 f9cb 	bl	80018d4 <Motor_A4988_Set_RPM>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800153e:	2100      	movs	r1, #0
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <main+0xc8>)
 8001542:	f7ff fc45 	bl	8000dd0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001546:	2100      	movs	r1, #0
 8001548:	481d      	ldr	r0, [pc, #116]	; (80015c0 <main+0xcc>)
 800154a:	f7ff fc41 	bl	8000dd0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800154e:	2100      	movs	r1, #0
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <main+0xd0>)
 8001552:	f7ff fc3d 	bl	8000dd0 <HAL_TIM_Encoder_Start>
 8001556:	4c1c      	ldr	r4, [pc, #112]	; (80015c8 <main+0xd4>)
			temp = TIM4->CNT;
 8001558:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80015d0 <main+0xdc>
	Motor_28BYJ_Move_Steps(&Motor_X, Steps);
 800155c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80015b0 <main+0xbc>
			temp = TIM3->CNT;
 8001560:	4f1a      	ldr	r7, [pc, #104]	; (80015cc <main+0xd8>)
 8001562:	e003      	b.n	800156c <main+0x78>
		Motor_28BYJ_Run_All();
 8001564:	f000 f8f2 	bl	800174c <Motor_28BYJ_Run_All>
		Motor_A4988_Run_All();
 8001568:	f000 f9c8 	bl	80018fc <Motor_A4988_Run_All>
		if (HAL_GetTick()-time_stamp>10)
 800156c:	f7fe fe30 	bl	80001d0 <HAL_GetTick>
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	1ac0      	subs	r0, r0, r3
 8001574:	280a      	cmp	r0, #10
 8001576:	d9f5      	bls.n	8001564 <main+0x70>
			time_stamp=HAL_GetTick();
 8001578:	f7fe fe2a 	bl	80001d0 <HAL_GetTick>
			TIM4->CNT=0;
 800157c:	2500      	movs	r5, #0
			temp = TIM2->CNT;
 800157e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
			time_stamp=HAL_GetTick();
 8001582:	6020      	str	r0, [r4, #0]
			temp = TIM4->CNT;
 8001584:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
	Motor_28BYJ_Move_Steps(&Motor_X, Steps);
 8001588:	4648      	mov	r0, r9
 800158a:	b209      	sxth	r1, r1
 800158c:	f000 f8d8 	bl	8001740 <Motor_28BYJ_Move_Steps>
			TIM4->CNT=0;
 8001590:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
			temp = TIM3->CNT;
 8001594:	6a79      	ldr	r1, [r7, #36]	; 0x24
	Motor_28BYJ_Move_Steps(&Motor_Y, Steps);
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <main+0xc0>)
 8001598:	b209      	sxth	r1, r1
 800159a:	f000 f8d1 	bl	8001740 <Motor_28BYJ_Move_Steps>
			TIM3->CNT=0;
 800159e:	627d      	str	r5, [r7, #36]	; 0x24
			temp = TIM2->CNT;
 80015a0:	6a71      	ldr	r1, [r6, #36]	; 0x24
	Motor_A4988_Move_Steps(&Motor_Z, Steps);
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <main+0xc4>)
 80015a4:	b209      	sxth	r1, r1
 80015a6:	f000 f9a1 	bl	80018ec <Motor_A4988_Move_Steps>
			TIM2->CNT=0;
 80015aa:	6275      	str	r5, [r6, #36]	; 0x24
 80015ac:	e7da      	b.n	8001564 <main+0x70>
 80015ae:	bf00      	nop
 80015b0:	200000b4 	.word	0x200000b4
 80015b4:	20000108 	.word	0x20000108
 80015b8:	200000e0 	.word	0x200000e0
 80015bc:	200001f4 	.word	0x200001f4
 80015c0:	20000174 	.word	0x20000174
 80015c4:	20000134 	.word	0x20000134
 80015c8:	20000028 	.word	0x20000028
 80015cc:	40000400 	.word	0x40000400
 80015d0:	40000800 	.word	0x40000800

080015d4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80015d4:	e7fe      	b.n	80015d4 <_Error_Handler>
 80015d6:	bf00      	nop

080015d8 <Motor_28BYJ_Init>:
#define MAX_MOTORS_28BYJ 5

static Motor_28BYJ_Struct_t* Motor_28BYJ_Struct_PTR_Array[MAX_MOTORS_28BYJ];
static uint8_t Attached_Motors_28BYJ = 0;

void Motor_28BYJ_Init(Motor_28BYJ_Struct_t* Motor) {
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_Init_Strut;

	GPIO_Init_Strut.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2201      	movs	r2, #1
	GPIO_Init_Strut.Speed = GPIO_SPEED_FREQ_MEDIUM;

	Motor->Port->BRR = (Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
			| Motor->Pin_3); //reset
 80015de:	88c1      	ldrh	r1, [r0, #6]
 80015e0:	8883      	ldrh	r3, [r0, #4]
 80015e2:	8900      	ldrh	r0, [r0, #8]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	8961      	ldrh	r1, [r4, #10]
 80015e8:	4303      	orrs	r3, r0
void Motor_28BYJ_Init(Motor_28BYJ_Struct_t* Motor) {
 80015ea:	b084      	sub	sp, #16
			| Motor->Pin_3); //reset
 80015ec:	430b      	orrs	r3, r1
 80015ee:	b29b      	uxth	r3, r3

	GPIO_Init_Strut.Pin = (Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80015f0:	ad04      	add	r5, sp, #16
	Motor->Port->BRR = (Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80015f2:	6820      	ldr	r0, [r4, #0]
	GPIO_Init_Strut.Pin = (Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80015f4:	f845 3d10 	str.w	r3, [r5, #-16]!
	Motor->Port->BRR = (Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80015f8:	6143      	str	r3, [r0, #20]
			| Motor->Pin_3);
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 80015fa:	4629      	mov	r1, r5
	GPIO_Init_Strut.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	9201      	str	r2, [sp, #4]
	GPIO_Init_Strut.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015fe:	9203      	str	r2, [sp, #12]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001600:	f7fe fe5c 	bl	80002bc <HAL_GPIO_Init>

	GPIO_Init_Strut.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0

	if (Motor->Limit_Pin_Logic == RESET) {
 8001606:	7ba2      	ldrb	r2, [r4, #14]
	} else {
		GPIO_Init_Strut.Pull = GPIO_PULLDOWN;
	}

	GPIO_Init_Strut.Pin = Motor->Limit_Pin;
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001608:	4629      	mov	r1, r5
	if (Motor->Limit_Pin_Logic == RESET) {
 800160a:	429a      	cmp	r2, r3
		GPIO_Init_Strut.Pull = GPIO_PULLUP;
 800160c:	bf14      	ite	ne
 800160e:	2602      	movne	r6, #2
 8001610:	2601      	moveq	r6, #1
	GPIO_Init_Strut.Pin = Motor->Limit_Pin;
 8001612:	89a2      	ldrh	r2, [r4, #12]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001614:	6820      	ldr	r0, [r4, #0]
	GPIO_Init_Strut.Mode = GPIO_MODE_INPUT;
 8001616:	e88d 004c 	stmia.w	sp, {r2, r3, r6}
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 800161a:	f7fe fe4f 	bl	80002bc <HAL_GPIO_Init>

	if (Motor->RPM != 0) {
 800161e:	8a23      	ldrh	r3, [r4, #16]
 8001620:	b1fb      	cbz	r3, 8001662 <Motor_28BYJ_Init+0x8a>
		Motor->Step_Delay = ((1000 * 1000 * 60)
				/ (Motor->RPM * Motor->Steps_For_360)); /*(us_in_minute / RPM*Steps_For_360)  */
 8001622:	8a61      	ldrh	r1, [r4, #18]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <Motor_28BYJ_Init+0x90>)
 8001626:	fb03 f301 	mul.w	r3, r3, r1
 800162a:	fb92 f2f3 	sdiv	r2, r2, r3
	} else {
		Motor->Step_Delay = 1000; //default
	}
	Motor->Current_Position = 0;
 800162e:	2300      	movs	r3, #0
	Motor->Running_Flag = RESET;
	Motor->Sequence = 0;
	Motor->Steps_To_Move = 0;
	Motor->Time_Stamp = 0;

	if (Attached_Motors_28BYJ >= MAX_MOTORS_28BYJ) {
 8001630:	4d0e      	ldr	r5, [pc, #56]	; (800166c <Motor_28BYJ_Init+0x94>)
 8001632:	6162      	str	r2, [r4, #20]
 8001634:	782a      	ldrb	r2, [r5, #0]
	Motor->Current_Position = 0;
 8001636:	61e3      	str	r3, [r4, #28]
	if (Attached_Motors_28BYJ >= MAX_MOTORS_28BYJ) {
 8001638:	2a04      	cmp	r2, #4
	Motor->Step_Delay_Complete_Flag = RESET;
 800163a:	7623      	strb	r3, [r4, #24]
	Motor->Limit_Flag = RESET;
 800163c:	73e3      	strb	r3, [r4, #15]
	Motor->Running_Flag = RESET;
 800163e:	7663      	strb	r3, [r4, #25]
	Motor->Sequence = 0;
 8001640:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	Motor->Steps_To_Move = 0;
 8001644:	6223      	str	r3, [r4, #32]
	Motor->Time_Stamp = 0;
 8001646:	62a3      	str	r3, [r4, #40]	; 0x28
	if (Attached_Motors_28BYJ >= MAX_MOTORS_28BYJ) {
 8001648:	d904      	bls.n	8001654 <Motor_28BYJ_Init+0x7c>
		_Error_Handler(__FILE__, __LINE__);		//Error
 800164a:	2136      	movs	r1, #54	; 0x36
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <Motor_28BYJ_Init+0x98>)
 800164e:	f7ff ffc1 	bl	80015d4 <_Error_Handler>
 8001652:	782a      	ldrb	r2, [r5, #0]
	}

	Motor_28BYJ_Struct_PTR_Array[Attached_Motors_28BYJ] = Motor;
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <Motor_28BYJ_Init+0x9c>)
	Attached_Motors_28BYJ++;
 8001656:	1c53      	adds	r3, r2, #1
	Motor_28BYJ_Struct_PTR_Array[Attached_Motors_28BYJ] = Motor;
 8001658:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	Attached_Motors_28BYJ++;
 800165c:	702b      	strb	r3, [r5, #0]
}
 800165e:	b004      	add	sp, #16
 8001660:	bd70      	pop	{r4, r5, r6, pc}
 8001662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001666:	e7e2      	b.n	800162e <Motor_28BYJ_Init+0x56>
 8001668:	03938700 	.word	0x03938700
 800166c:	2000002c 	.word	0x2000002c
 8001670:	08001f58 	.word	0x08001f58
 8001674:	20000030 	.word	0x20000030

08001678 <Motor_28BYJ_Step>:

void Motor_28BYJ_Step(Motor_28BYJ_Struct_t* Motor) {
	uint16_t BRR_temp = 0; //reset
	uint16_t BSRR_temp = 0; //set

	switch (Motor->Sequence) {
 8001678:	f990 3024 	ldrsb.w	r3, [r0, #36]	; 0x24
void Motor_28BYJ_Step(Motor_28BYJ_Struct_t* Motor) {
 800167c:	b410      	push	{r4}
	switch (Motor->Sequence) {
 800167e:	2b07      	cmp	r3, #7
 8001680:	d848      	bhi.n	8001714 <Motor_28BYJ_Step+0x9c>
 8001682:	e8df f003 	tbb	[pc, r3]
 8001686:	1911      	.short	0x1911
 8001688:	3b332a22 	.word	0x3b332a22
 800168c:	043f      	.short	0x043f
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2;
		break;
	}
	case 7: {
		BSRR_temp = Motor->Pin_0 | Motor->Pin_3;
		BRR_temp = Motor->Pin_1 | Motor->Pin_2;
 800168e:	88c3      	ldrh	r3, [r0, #6]
 8001690:	8904      	ldrh	r4, [r0, #8]
		BSRR_temp = Motor->Pin_0 | Motor->Pin_3;
 8001692:	8882      	ldrh	r2, [r0, #4]
 8001694:	8941      	ldrh	r1, [r0, #10]
		BRR_temp = Motor->Pin_1 | Motor->Pin_2;
 8001696:	4323      	orrs	r3, r4
		BSRR_temp = Motor->Pin_0 | Motor->Pin_3;
 8001698:	430a      	orrs	r2, r1
		BRR_temp = Motor->Pin_1 | Motor->Pin_2;
 800169a:	b29b      	uxth	r3, r3
 800169c:	b292      	uxth	r2, r2
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2 | Motor->Pin_3;
		break;
	}
	}

	Motor->Port->BRR = BRR_temp;
 800169e:	6801      	ldr	r1, [r0, #0]
	Motor->Port->BSRR = BSRR_temp;

}
 80016a0:	bc10      	pop	{r4}
	Motor->Port->BRR = BRR_temp;
 80016a2:	614b      	str	r3, [r1, #20]
	Motor->Port->BSRR = BSRR_temp;
 80016a4:	610a      	str	r2, [r1, #16]
}
 80016a6:	4770      	bx	lr
		BRR_temp = Motor->Pin_1 | Motor->Pin_2 | Motor->Pin_3;
 80016a8:	88c3      	ldrh	r3, [r0, #6]
 80016aa:	8901      	ldrh	r1, [r0, #8]
 80016ac:	8942      	ldrh	r2, [r0, #10]
 80016ae:	430b      	orrs	r3, r1
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	8882      	ldrh	r2, [r0, #4]
		break;
 80016b6:	e7f2      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_2 | Motor->Pin_3;
 80016b8:	8903      	ldrh	r3, [r0, #8]
 80016ba:	8944      	ldrh	r4, [r0, #10]
		BSRR_temp = Motor->Pin_0 | Motor->Pin_1;
 80016bc:	8882      	ldrh	r2, [r0, #4]
 80016be:	88c1      	ldrh	r1, [r0, #6]
		BRR_temp = Motor->Pin_2 | Motor->Pin_3;
 80016c0:	4323      	orrs	r3, r4
		BSRR_temp = Motor->Pin_0 | Motor->Pin_1;
 80016c2:	430a      	orrs	r2, r1
		BRR_temp = Motor->Pin_2 | Motor->Pin_3;
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b292      	uxth	r2, r2
		break;
 80016c8:	e7e9      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_0 | Motor->Pin_2 | Motor->Pin_3;
 80016ca:	8883      	ldrh	r3, [r0, #4]
 80016cc:	8901      	ldrh	r1, [r0, #8]
 80016ce:	8942      	ldrh	r2, [r0, #10]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	88c2      	ldrh	r2, [r0, #6]
		break;
 80016d8:	e7e1      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_0 | Motor->Pin_3;
 80016da:	8883      	ldrh	r3, [r0, #4]
 80016dc:	8944      	ldrh	r4, [r0, #10]
		BSRR_temp = Motor->Pin_1 | Motor->Pin_2;
 80016de:	88c2      	ldrh	r2, [r0, #6]
 80016e0:	8901      	ldrh	r1, [r0, #8]
		BRR_temp = Motor->Pin_0 | Motor->Pin_3;
 80016e2:	4323      	orrs	r3, r4
		BSRR_temp = Motor->Pin_1 | Motor->Pin_2;
 80016e4:	430a      	orrs	r2, r1
		BRR_temp = Motor->Pin_0 | Motor->Pin_3;
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b292      	uxth	r2, r2
		break;
 80016ea:	e7d8      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_3;
 80016ec:	8883      	ldrh	r3, [r0, #4]
 80016ee:	88c1      	ldrh	r1, [r0, #6]
 80016f0:	8942      	ldrh	r2, [r0, #10]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	8902      	ldrh	r2, [r0, #8]
		break;
 80016fa:	e7d0      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_0 | Motor->Pin_1;
 80016fc:	8883      	ldrh	r3, [r0, #4]
 80016fe:	88c4      	ldrh	r4, [r0, #6]
		BSRR_temp = Motor->Pin_2 | Motor->Pin_3;
 8001700:	8902      	ldrh	r2, [r0, #8]
 8001702:	e7c7      	b.n	8001694 <Motor_28BYJ_Step+0x1c>
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2;
 8001704:	8883      	ldrh	r3, [r0, #4]
 8001706:	88c1      	ldrh	r1, [r0, #6]
 8001708:	8902      	ldrh	r2, [r0, #8]
 800170a:	430b      	orrs	r3, r1
 800170c:	4313      	orrs	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	8942      	ldrh	r2, [r0, #10]
		break;
 8001712:	e7c4      	b.n	800169e <Motor_28BYJ_Step+0x26>
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2 | Motor->Pin_3;
 8001714:	88c1      	ldrh	r1, [r0, #6]
 8001716:	8883      	ldrh	r3, [r0, #4]
 8001718:	8904      	ldrh	r4, [r0, #8]
 800171a:	430b      	orrs	r3, r1
 800171c:	8941      	ldrh	r1, [r0, #10]
 800171e:	4323      	orrs	r3, r4
 8001720:	430b      	orrs	r3, r1
		break;
 8001722:	2200      	movs	r2, #0
		BRR_temp = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2 | Motor->Pin_3;
 8001724:	b29b      	uxth	r3, r3
		break;
 8001726:	e7ba      	b.n	800169e <Motor_28BYJ_Step+0x26>

08001728 <Motor_28BYJ_Set_RPM>:
			| Motor->Pin_3;
	Motor->Running_Flag = RESET;
}

void Motor_28BYJ_Set_RPM(Motor_28BYJ_Struct_t* Motor, uint16_t RPM) {
	Motor->RPM = RPM;
 8001728:	8201      	strh	r1, [r0, #16]
	if (Motor->RPM != 0) {
 800172a:	b131      	cbz	r1, 800173a <Motor_28BYJ_Set_RPM+0x12>
		Motor->Step_Delay = ((1000 * 1000 * 60)
				/ (Motor->RPM * Motor->Steps_For_360)); /*(us in minute / RPM*Steps_For_360)  */
 800172c:	8a42      	ldrh	r2, [r0, #18]
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <Motor_28BYJ_Set_RPM+0x14>)
 8001730:	fb01 f102 	mul.w	r1, r1, r2
 8001734:	fb93 f1f1 	sdiv	r1, r3, r1
		Motor->Step_Delay = ((1000 * 1000 * 60)
 8001738:	6141      	str	r1, [r0, #20]
 800173a:	4770      	bx	lr
 800173c:	03938700 	.word	0x03938700

08001740 <Motor_28BYJ_Move_Steps>:

void Motor_28BYJ_Move_Steps(Motor_28BYJ_Struct_t* Motor, int32_t Steps) {

	Motor->Steps_To_Move += Steps;

	Motor->Running_Flag = SET;
 8001740:	2201      	movs	r2, #1
	Motor->Steps_To_Move += Steps;
 8001742:	6a03      	ldr	r3, [r0, #32]
	Motor->Running_Flag = SET;
 8001744:	7642      	strb	r2, [r0, #25]
	Motor->Steps_To_Move += Steps;
 8001746:	4419      	add	r1, r3
 8001748:	6201      	str	r1, [r0, #32]
 800174a:	4770      	bx	lr

0800174c <Motor_28BYJ_Run_All>:
	Motor->Steps_To_Move += tempo;

	Motor->Running_Flag = SET;
}

void Motor_28BYJ_Run_All() {
 800174c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (Attached_Motors_28BYJ >= MAX_MOTORS_28BYJ) {
 8001750:	4e37      	ldr	r6, [pc, #220]	; (8001830 <Motor_28BYJ_Run_All+0xe4>)
 8001752:	7833      	ldrb	r3, [r6, #0]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d844      	bhi.n	80017e2 <Motor_28BYJ_Run_All+0x96>
		_Error_Handler(__FILE__, __LINE__);		//Error
	}

	Motor_28BYJ_Struct_t* PTR = NULL;

	for (uint8_t i = 0; i < Attached_Motors_28BYJ; i++) {
 8001758:	b353      	cbz	r3, 80017b0 <Motor_28BYJ_Run_All+0x64>
 800175a:	2400      	movs	r4, #0
		Motor->Sequence = 7;
 800175c:	f04f 0907 	mov.w	r9, #7
	Motor->Running_Flag = RESET;
 8001760:	46a0      	mov	r8, r4
 8001762:	4f34      	ldr	r7, [pc, #208]	; (8001834 <Motor_28BYJ_Run_All+0xe8>)
 8001764:	e004      	b.n	8001770 <Motor_28BYJ_Run_All+0x24>
	for (uint8_t i = 0; i < Attached_Motors_28BYJ; i++) {
 8001766:	3401      	adds	r4, #1
 8001768:	7833      	ldrb	r3, [r6, #0]
 800176a:	b2e4      	uxtb	r4, r4
 800176c:	42a3      	cmp	r3, r4
 800176e:	d91f      	bls.n	80017b0 <Motor_28BYJ_Run_All+0x64>
		PTR = Motor_28BYJ_Struct_PTR_Array[i];
 8001770:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]

		if (Get_us() - (PTR->Time_Stamp) >= PTR->Step_Delay) {
 8001774:	f7ff fd8e 	bl	8001294 <Get_us>
 8001778:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800177a:	696a      	ldr	r2, [r5, #20]
 800177c:	1ac0      	subs	r0, r0, r3
 800177e:	4290      	cmp	r0, r2
 8001780:	d3f1      	bcc.n	8001766 <Motor_28BYJ_Run_All+0x1a>
			PTR->Time_Stamp = Get_us();
 8001782:	f7ff fd87 	bl	8001294 <Get_us>

			if (PTR->Running_Flag == SET) {
 8001786:	7e6b      	ldrb	r3, [r5, #25]
			PTR->Time_Stamp = Get_us();
 8001788:	62a8      	str	r0, [r5, #40]	; 0x28
			if (PTR->Running_Flag == SET) {
 800178a:	2b01      	cmp	r3, #1
 800178c:	d012      	beq.n	80017b4 <Motor_28BYJ_Run_All+0x68>
			| Motor->Pin_3;
 800178e:	88ea      	ldrh	r2, [r5, #6]
 8001790:	88ab      	ldrh	r3, [r5, #4]
 8001792:	8929      	ldrh	r1, [r5, #8]
 8001794:	4313      	orrs	r3, r2
 8001796:	896a      	ldrh	r2, [r5, #10]
 8001798:	430b      	orrs	r3, r1
 800179a:	4313      	orrs	r3, r2
	Motor->Port->BRR = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 800179c:	682a      	ldr	r2, [r5, #0]
			| Motor->Pin_3;
 800179e:	b29b      	uxth	r3, r3
	Motor->Port->BRR = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80017a0:	6153      	str	r3, [r2, #20]
	for (uint8_t i = 0; i < Attached_Motors_28BYJ; i++) {
 80017a2:	3401      	adds	r4, #1
 80017a4:	7833      	ldrb	r3, [r6, #0]
 80017a6:	b2e4      	uxtb	r4, r4
 80017a8:	42a3      	cmp	r3, r4
	Motor->Running_Flag = RESET;
 80017aa:	f885 8019 	strb.w	r8, [r5, #25]
	for (uint8_t i = 0; i < Attached_Motors_28BYJ; i++) {
 80017ae:	d8df      	bhi.n	8001770 <Motor_28BYJ_Run_All+0x24>
 80017b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (PTR->Steps_To_Move > 0) {
 80017b4:	6a2b      	ldr	r3, [r5, #32]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd19      	ble.n	80017ee <Motor_28BYJ_Run_All+0xa2>
	Motor->Sequence++;
 80017ba:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	Motor_28BYJ_Step(Motor);
 80017be:	4628      	mov	r0, r5
	Motor->Sequence++;
 80017c0:	3301      	adds	r3, #1
 80017c2:	b25b      	sxtb	r3, r3
	if (Motor->Sequence > 7) {
 80017c4:	2b07      	cmp	r3, #7
	Motor->Sequence++;
 80017c6:	bfd4      	ite	le
 80017c8:	f885 3024 	strble.w	r3, [r5, #36]	; 0x24
		Motor->Sequence = 0;
 80017cc:	f885 8024 	strbgt.w	r8, [r5, #36]	; 0x24
	Motor_28BYJ_Step(Motor);
 80017d0:	f7ff ff52 	bl	8001678 <Motor_28BYJ_Step>
	Motor->Current_Position++;
 80017d4:	69ea      	ldr	r2, [r5, #28]
					Motor_28BYJ_Move_CW(PTR);
					PTR->Steps_To_Move--;
 80017d6:	6a2b      	ldr	r3, [r5, #32]
	Motor->Current_Position++;
 80017d8:	3201      	adds	r2, #1
					PTR->Steps_To_Move--;
 80017da:	3b01      	subs	r3, #1
	Motor->Current_Position++;
 80017dc:	61ea      	str	r2, [r5, #28]
					PTR->Steps_To_Move--;
 80017de:	622b      	str	r3, [r5, #32]
 80017e0:	e7c1      	b.n	8001766 <Motor_28BYJ_Run_All+0x1a>
		_Error_Handler(__FILE__, __LINE__);		//Error
 80017e2:	21d1      	movs	r1, #209	; 0xd1
 80017e4:	4814      	ldr	r0, [pc, #80]	; (8001838 <Motor_28BYJ_Run_All+0xec>)
 80017e6:	f7ff fef5 	bl	80015d4 <_Error_Handler>
 80017ea:	7833      	ldrb	r3, [r6, #0]
 80017ec:	e7b4      	b.n	8001758 <Motor_28BYJ_Run_All+0xc>
				} else if (PTR->Steps_To_Move < 0) {
 80017ee:	d10b      	bne.n	8001808 <Motor_28BYJ_Run_All+0xbc>
			| Motor->Pin_3;
 80017f0:	88ea      	ldrh	r2, [r5, #6]
 80017f2:	88a9      	ldrh	r1, [r5, #4]
 80017f4:	8928      	ldrh	r0, [r5, #8]
 80017f6:	4311      	orrs	r1, r2
 80017f8:	896a      	ldrh	r2, [r5, #10]
 80017fa:	4301      	orrs	r1, r0
 80017fc:	4311      	orrs	r1, r2
	Motor->Port->BRR = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 80017fe:	682a      	ldr	r2, [r5, #0]
			| Motor->Pin_3;
 8001800:	b289      	uxth	r1, r1
	Motor->Port->BRR = Motor->Pin_0 | Motor->Pin_1 | Motor->Pin_2
 8001802:	6151      	str	r1, [r2, #20]
	Motor->Running_Flag = RESET;
 8001804:	766b      	strb	r3, [r5, #25]
 8001806:	e7ae      	b.n	8001766 <Motor_28BYJ_Run_All+0x1a>
	Motor->Sequence--;
 8001808:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	Motor_28BYJ_Step(Motor);
 800180c:	4628      	mov	r0, r5
	Motor->Sequence--;
 800180e:	3b01      	subs	r3, #1
 8001810:	b25b      	sxtb	r3, r3
	if (Motor->Sequence < 0) {
 8001812:	2b00      	cmp	r3, #0
	Motor->Sequence--;
 8001814:	bfac      	ite	ge
 8001816:	f885 3024 	strbge.w	r3, [r5, #36]	; 0x24
		Motor->Sequence = 7;
 800181a:	f885 9024 	strblt.w	r9, [r5, #36]	; 0x24
	Motor_28BYJ_Step(Motor);
 800181e:	f7ff ff2b 	bl	8001678 <Motor_28BYJ_Step>
	Motor->Current_Position--;
 8001822:	69ea      	ldr	r2, [r5, #28]
					Motor_28BYJ_Move_CCW(PTR);
					PTR->Steps_To_Move++;
 8001824:	6a2b      	ldr	r3, [r5, #32]
	Motor->Current_Position--;
 8001826:	3a01      	subs	r2, #1
					PTR->Steps_To_Move++;
 8001828:	3301      	adds	r3, #1
	Motor->Current_Position--;
 800182a:	61ea      	str	r2, [r5, #28]
					PTR->Steps_To_Move++;
 800182c:	622b      	str	r3, [r5, #32]
 800182e:	e79a      	b.n	8001766 <Motor_28BYJ_Run_All+0x1a>
 8001830:	2000002c 	.word	0x2000002c
 8001834:	20000030 	.word	0x20000030
 8001838:	08001f58 	.word	0x08001f58

0800183c <Motor_A4988_Init>:

static Motor_A4988_Struct_t* Motor_A4988_Struct_PTR_Array[MAX_MOTORS_A4988];
static uint8_t Attached_Motors_A4988 = 0;

void Motor_A4988_Init(Motor_A4988_Struct_t* Motor)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_Init_Strut;

	GPIO_Init_Strut.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2601      	movs	r6, #1
	GPIO_Init_Strut.Speed = GPIO_SPEED_FREQ_MEDIUM;

	Motor->Port->BRR = (Motor->DIR_Pin | Motor->EN_Pin); //reset
 8001840:	8907      	ldrh	r7, [r0, #8]
 8001842:	88c3      	ldrh	r3, [r0, #6]
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low

	GPIO_Init_Strut.Pin = (Motor->STP_Pin | Motor->DIR_Pin | Motor->EN_Pin);
 8001844:	8881      	ldrh	r1, [r0, #4]
{
 8001846:	b085      	sub	sp, #20
	Motor->Port->BRR = (Motor->DIR_Pin | Motor->EN_Pin); //reset
 8001848:	433b      	orrs	r3, r7
 800184a:	6802      	ldr	r2, [r0, #0]
	GPIO_Init_Strut.Pin = (Motor->STP_Pin | Motor->DIR_Pin | Motor->EN_Pin);
 800184c:	4319      	orrs	r1, r3
 800184e:	ad04      	add	r5, sp, #16
{
 8001850:	4604      	mov	r4, r0
	GPIO_Init_Strut.Pin = (Motor->STP_Pin | Motor->DIR_Pin | Motor->EN_Pin);
 8001852:	f845 1d10 	str.w	r1, [r5, #-16]!
	Motor->Port->BRR = (Motor->DIR_Pin | Motor->EN_Pin); //reset
 8001856:	6153      	str	r3, [r2, #20]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001858:	4610      	mov	r0, r2
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
 800185a:	6117      	str	r7, [r2, #16]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 800185c:	4629      	mov	r1, r5
	GPIO_Init_Strut.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	9601      	str	r6, [sp, #4]
	GPIO_Init_Strut.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001860:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001862:	f7fe fd2b 	bl	80002bc <HAL_GPIO_Init>

	GPIO_Init_Strut.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0

	if (Motor->Limit_Pin_Logic == RESET)
 8001868:	7b22      	ldrb	r2, [r4, #12]
	{
		GPIO_Init_Strut.Pull = GPIO_PULLDOWN;
	}

	GPIO_Init_Strut.Pin = Motor->Limit_Pin;
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 800186a:	4629      	mov	r1, r5
	if (Motor->Limit_Pin_Logic == RESET)
 800186c:	429a      	cmp	r2, r3
		GPIO_Init_Strut.Pull = GPIO_PULLUP;
 800186e:	bf18      	it	ne
 8001870:	2602      	movne	r6, #2
	GPIO_Init_Strut.Pin = Motor->Limit_Pin;
 8001872:	8962      	ldrh	r2, [r4, #10]
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 8001874:	6820      	ldr	r0, [r4, #0]
	GPIO_Init_Strut.Mode = GPIO_MODE_INPUT;
 8001876:	e88d 004c 	stmia.w	sp, {r2, r3, r6}
	HAL_GPIO_Init(Motor->Port, &GPIO_Init_Strut);
 800187a:	f7fe fd1f 	bl	80002bc <HAL_GPIO_Init>

	if (Motor->RPM != 0)
 800187e:	89e3      	ldrh	r3, [r4, #14]
 8001880:	b1eb      	cbz	r3, 80018be <Motor_A4988_Init+0x82>
	{
		Motor->Step_Delay = ((1000 * 1000 * 60)
				/ (Motor->RPM * Motor->Steps_For_360)); /*(us_in_minute / RPM*Steps_For_360)  */
 8001882:	8a21      	ldrh	r1, [r4, #16]
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <Motor_A4988_Init+0x88>)
 8001886:	fb03 f301 	mul.w	r3, r3, r1
 800188a:	fb92 f2f3 	sdiv	r2, r2, r3
	}
	else
	{
		Motor->Step_Delay = 1000; //default
	}
	Motor->Current_Position = 0;
 800188e:	2300      	movs	r3, #0
	Motor->Limit_Flag = RESET;
	Motor->Running_Flag = RESET;
	Motor->Steps_To_Move = 0;
	Motor->Time_Stamp = 0;

	if (Attached_Motors_A4988 >= MAX_MOTORS_A4988)
 8001890:	4d0d      	ldr	r5, [pc, #52]	; (80018c8 <Motor_A4988_Init+0x8c>)
 8001892:	6162      	str	r2, [r4, #20]
 8001894:	782a      	ldrb	r2, [r5, #0]
	Motor->Current_Position = 0;
 8001896:	61e3      	str	r3, [r4, #28]
	if (Attached_Motors_A4988 >= MAX_MOTORS_A4988)
 8001898:	2a04      	cmp	r2, #4
	Motor->Step_Delay_Complete_Flag = RESET;
 800189a:	7623      	strb	r3, [r4, #24]
	Motor->Limit_Flag = RESET;
 800189c:	7363      	strb	r3, [r4, #13]
	Motor->Running_Flag = RESET;
 800189e:	7663      	strb	r3, [r4, #25]
	Motor->Steps_To_Move = 0;
 80018a0:	6223      	str	r3, [r4, #32]
	Motor->Time_Stamp = 0;
 80018a2:	6263      	str	r3, [r4, #36]	; 0x24
	if (Attached_Motors_A4988 >= MAX_MOTORS_A4988)
 80018a4:	d904      	bls.n	80018b0 <Motor_A4988_Init+0x74>
	{
		_Error_Handler(__FILE__, __LINE__);		//Error
 80018a6:	213c      	movs	r1, #60	; 0x3c
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <Motor_A4988_Init+0x90>)
 80018aa:	f7ff fe93 	bl	80015d4 <_Error_Handler>
 80018ae:	782a      	ldrb	r2, [r5, #0]
	}

	Motor_A4988_Struct_PTR_Array[Attached_Motors_A4988] = Motor;
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <Motor_A4988_Init+0x94>)
	Attached_Motors_A4988++;
 80018b2:	1c53      	adds	r3, r2, #1
	Motor_A4988_Struct_PTR_Array[Attached_Motors_A4988] = Motor;
 80018b4:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	Attached_Motors_A4988++;
 80018b8:	702b      	strb	r3, [r5, #0]
}
 80018ba:	b005      	add	sp, #20
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018c2:	e7e4      	b.n	800188e <Motor_A4988_Init+0x52>
 80018c4:	03938700 	.word	0x03938700
 80018c8:	20000044 	.word	0x20000044
 80018cc:	08001f70 	.word	0x08001f70
 80018d0:	20000048 	.word	0x20000048

080018d4 <Motor_A4988_Set_RPM>:
	Motor->Running_Flag = RESET;
}

void Motor_A4988_Set_RPM(Motor_A4988_Struct_t* Motor, uint16_t RPM)
{
	Motor->RPM = RPM;
 80018d4:	81c1      	strh	r1, [r0, #14]
	if (Motor->RPM != 0)
 80018d6:	b131      	cbz	r1, 80018e6 <Motor_A4988_Set_RPM+0x12>
	{
		Motor->Step_Delay = ((1000 * 1000 * 60) / (RPM * Motor->Steps_For_360)); /*(us_in_minute / RPM*Steps_For_360)  */
 80018d8:	8a02      	ldrh	r2, [r0, #16]
 80018da:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <Motor_A4988_Set_RPM+0x14>)
 80018dc:	fb01 f102 	mul.w	r1, r1, r2
 80018e0:	fb93 f1f1 	sdiv	r1, r3, r1
 80018e4:	6141      	str	r1, [r0, #20]
 80018e6:	4770      	bx	lr
 80018e8:	03938700 	.word	0x03938700

080018ec <Motor_A4988_Move_Steps>:
}

void Motor_A4988_Move_Steps(Motor_A4988_Struct_t* Motor, int32_t Steps)
{

	Motor->Steps_To_Move = Steps;
 80018ec:	6201      	str	r1, [r0, #32]

	if (Motor->Steps_To_Move != 0)
 80018ee:	b121      	cbz	r1, 80018fa <Motor_A4988_Move_Steps+0xe>
	{
		Motor->Running_Flag = SET;
 80018f0:	2101      	movs	r1, #1

}

void Motor_A4988_Enable(Motor_A4988_Struct_t* Motor)
{
	Motor->Port->BRR = Motor->EN_Pin; //reset EN  active low
 80018f2:	6803      	ldr	r3, [r0, #0]
 80018f4:	8902      	ldrh	r2, [r0, #8]
		Motor->Running_Flag = SET;
 80018f6:	7641      	strb	r1, [r0, #25]
	Motor->Port->BRR = Motor->EN_Pin; //reset EN  active low
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	4770      	bx	lr

080018fc <Motor_A4988_Run_All>:
{
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
}

void Motor_A4988_Run_All()
{
 80018fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Motor_A4988_Struct_t* PTR = NULL;

	for (uint8_t i = 0; i < Attached_Motors_A4988; i++)
 8001900:	4e26      	ldr	r6, [pc, #152]	; (800199c <Motor_A4988_Run_All+0xa0>)
 8001902:	7833      	ldrb	r3, [r6, #0]
 8001904:	b31b      	cbz	r3, 800194e <Motor_A4988_Run_All+0x52>
 8001906:	2400      	movs	r4, #0
 8001908:	4f25      	ldr	r7, [pc, #148]	; (80019a0 <Motor_A4988_Run_All+0xa4>)
	Motor->Running_Flag = RESET;
 800190a:	46a0      	mov	r8, r4
 800190c:	e004      	b.n	8001918 <Motor_A4988_Run_All+0x1c>
	for (uint8_t i = 0; i < Attached_Motors_A4988; i++)
 800190e:	3401      	adds	r4, #1
 8001910:	7833      	ldrb	r3, [r6, #0]
 8001912:	b2e4      	uxtb	r4, r4
 8001914:	42a3      	cmp	r3, r4
 8001916:	d91a      	bls.n	800194e <Motor_A4988_Run_All+0x52>
	{
		PTR = Motor_A4988_Struct_PTR_Array[i];
 8001918:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]

		if (Get_us() - (PTR->Time_Stamp)
 800191c:	f7ff fcba 	bl	8001294 <Get_us>
 8001920:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001922:	696a      	ldr	r2, [r5, #20]
 8001924:	1ac0      	subs	r0, r0, r3
 8001926:	4290      	cmp	r0, r2
 8001928:	d3f1      	bcc.n	800190e <Motor_A4988_Run_All+0x12>
				>= PTR->Step_Delay)
		{
			PTR->Time_Stamp = Get_us();
 800192a:	f7ff fcb3 	bl	8001294 <Get_us>

			if (PTR->Running_Flag == SET)
 800192e:	7e6b      	ldrb	r3, [r5, #25]
			PTR->Time_Stamp = Get_us();
 8001930:	6268      	str	r0, [r5, #36]	; 0x24
			if (PTR->Running_Flag == SET)
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00d      	beq.n	8001952 <Motor_A4988_Run_All+0x56>
	Motor->Port->BRR = Motor->STP_Pin;
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	88a9      	ldrh	r1, [r5, #4]
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
 800193a:	892a      	ldrh	r2, [r5, #8]
	for (uint8_t i = 0; i < Attached_Motors_A4988; i++)
 800193c:	3401      	adds	r4, #1
	Motor->Port->BRR = Motor->STP_Pin;
 800193e:	6159      	str	r1, [r3, #20]
	Motor->Running_Flag = RESET;
 8001940:	f885 8019 	strb.w	r8, [r5, #25]
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
 8001944:	611a      	str	r2, [r3, #16]
	for (uint8_t i = 0; i < Attached_Motors_A4988; i++)
 8001946:	7833      	ldrb	r3, [r6, #0]
 8001948:	b2e4      	uxtb	r4, r4
 800194a:	42a3      	cmp	r3, r4
 800194c:	d8e4      	bhi.n	8001918 <Motor_A4988_Run_All+0x1c>
 800194e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			{
				if (PTR->Steps_To_Move > 0)
 8001952:	6a2b      	ldr	r3, [r5, #32]
 8001954:	2b00      	cmp	r3, #0
				{
					Motor_A4988_Move_CW(PTR);
					PTR->Steps_To_Move--;
 8001956:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
				if (PTR->Steps_To_Move > 0)
 800195a:	dd0a      	ble.n	8001972 <Motor_A4988_Run_All+0x76>
	Motor->Port->BSRR = Motor->DIR_Pin; //set dir
 800195c:	88e9      	ldrh	r1, [r5, #6]
 800195e:	682a      	ldr	r2, [r5, #0]
	Motor->Current_Position++;
 8001960:	69eb      	ldr	r3, [r5, #28]
	Motor->Port->BSRR = Motor->DIR_Pin; //set dir
 8001962:	6111      	str	r1, [r2, #16]
	Motor->Port->BSRR = (Motor->STP_Pin); //set
 8001964:	88a9      	ldrh	r1, [r5, #4]
	Motor->Current_Position++;
 8001966:	3301      	adds	r3, #1
	Motor->Port->BSRR = (Motor->STP_Pin); //set
 8001968:	6111      	str	r1, [r2, #16]
	Motor->Port->BRR = (Motor->STP_Pin); //reset
 800196a:	6151      	str	r1, [r2, #20]
					PTR->Steps_To_Move--;
 800196c:	6228      	str	r0, [r5, #32]
	Motor->Current_Position++;
 800196e:	61eb      	str	r3, [r5, #28]
 8001970:	e7cd      	b.n	800190e <Motor_A4988_Run_All+0x12>
				}
				else if (PTR->Steps_To_Move < 0)
 8001972:	d106      	bne.n	8001982 <Motor_A4988_Run_All+0x86>
	Motor->Port->BRR = Motor->STP_Pin;
 8001974:	682a      	ldr	r2, [r5, #0]
 8001976:	88a8      	ldrh	r0, [r5, #4]
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
 8001978:	8929      	ldrh	r1, [r5, #8]
	Motor->Port->BRR = Motor->STP_Pin;
 800197a:	6150      	str	r0, [r2, #20]
	Motor->Running_Flag = RESET;
 800197c:	766b      	strb	r3, [r5, #25]
	Motor->Port->BSRR = Motor->EN_Pin; //set EN  active low
 800197e:	6111      	str	r1, [r2, #16]
 8001980:	e7c5      	b.n	800190e <Motor_A4988_Run_All+0x12>
	Motor->Port->BRR = Motor->DIR_Pin; //reset dir
 8001982:	88e8      	ldrh	r0, [r5, #6]
 8001984:	6829      	ldr	r1, [r5, #0]
	Motor->Current_Position--;
 8001986:	69ea      	ldr	r2, [r5, #28]
	Motor->Port->BRR = Motor->DIR_Pin; //reset dir
 8001988:	6148      	str	r0, [r1, #20]
	Motor->Port->BSRR = (Motor->STP_Pin); //set
 800198a:	88a8      	ldrh	r0, [r5, #4]
				{
					Motor_A4988_Move_CCW(PTR);
					PTR->Steps_To_Move++;
 800198c:	3301      	adds	r3, #1
	Motor->Current_Position--;
 800198e:	3a01      	subs	r2, #1
	Motor->Port->BSRR = (Motor->STP_Pin); //set
 8001990:	6108      	str	r0, [r1, #16]
	Motor->Port->BRR = (Motor->STP_Pin); //reset
 8001992:	6148      	str	r0, [r1, #20]
					PTR->Steps_To_Move++;
 8001994:	622b      	str	r3, [r5, #32]
	Motor->Current_Position--;
 8001996:	61ea      	str	r2, [r5, #28]
 8001998:	e7b9      	b.n	800190e <Motor_A4988_Run_All+0x12>
 800199a:	bf00      	nop
 800199c:	20000044 	.word	0x20000044
 80019a0:	20000048 	.word	0x20000048

080019a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_MspInit+0x88>)
{
 80019a6:	b500      	push	{lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	699a      	ldr	r2, [r3, #24]
{
 80019aa:	b083      	sub	sp, #12
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	699b      	ldr	r3, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	f7fe fc0d 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f06f 000b 	mvn.w	r0, #11
 80019c8:	4611      	mov	r1, r2
 80019ca:	f7fe fc19 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f06f 000a 	mvn.w	r0, #10
 80019d4:	4611      	mov	r1, r2
 80019d6:	f7fe fc13 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	f06f 0009 	mvn.w	r0, #9
 80019e0:	4611      	mov	r1, r2
 80019e2:	f7fe fc0d 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f06f 0004 	mvn.w	r0, #4
 80019ec:	4611      	mov	r1, r2
 80019ee:	f7fe fc07 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f06f 0003 	mvn.w	r0, #3
 80019f8:	4611      	mov	r1, r2
 80019fa:	f7fe fc01 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f06f 0001 	mvn.w	r0, #1
 8001a04:	4611      	mov	r1, r2
 8001a06:	f7fe fbfb 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a10:	4611      	mov	r1, r2
 8001a12:	f7fe fbf5 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_MspInit+0x8c>)
 8001a18:	6853      	ldr	r3, [r2, #4]
 8001a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a24:	b003      	add	sp, #12
 8001a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000

08001a34 <NMI_Handler>:
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a38:	e7fe      	b.n	8001a38 <HardFault_Handler>
 8001a3a:	bf00      	nop

08001a3c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler>
 8001a3e:	bf00      	nop

08001a40 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a40:	e7fe      	b.n	8001a40 <BusFault_Handler>
 8001a42:	bf00      	nop

08001a44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler>
 8001a46:	bf00      	nop

08001a48 <SVC_Handler>:
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <DebugMon_Handler>:
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a56:	f7fe fbaf 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a5e:	f7fe bc29 	b.w	80002b4 <HAL_SYSTICK_IRQHandler>
 8001a62:	bf00      	nop

08001a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a64:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a66:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a6a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8001a72:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a74:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8001a76:	f041 0101 	orr.w	r1, r1, #1
 8001a7a:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	400a      	ands	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8c:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a9c:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8001a9e:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001aa0:	6084      	str	r4, [r0, #8]
#endif 
}
 8001aa2:	bc30      	pop	{r4, r5}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	f8ff0000 	.word	0xf8ff0000
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <MX_TIM1_Init>:
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
 8001ab4:	2300      	movs	r3, #0
{
 8001ab6:	b530      	push	{r4, r5, lr}
  htim1.Instance = TIM1;
 8001ab8:	4c35      	ldr	r4, [pc, #212]	; (8001b90 <MX_TIM1_Init+0xdc>)
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <MX_TIM1_Init+0xe0>)
{
 8001abc:	b095      	sub	sp, #84	; 0x54
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001abe:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 0;
 8001ac0:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 0;
 8001ac4:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	61a3      	str	r3, [r4, #24]
  htim1.Instance = TIM1;
 8001acc:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ace:	f7ff f8a7 	bl	8000c20 <HAL_TIM_PWM_Init>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d134      	bne.n	8001b40 <MX_TIM1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad8:	4669      	mov	r1, sp
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <MX_TIM1_Init+0xdc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae0:	f7ff fac0 	bl	8001064 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d14e      	bne.n	8001b86 <MX_TIM1_Init+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8001ae8:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aea:	2560      	movs	r5, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aec:	461a      	mov	r2, r3
 8001aee:	a906      	add	r1, sp, #24
 8001af0:	4827      	ldr	r0, [pc, #156]	; (8001b90 <MX_TIM1_Init+0xdc>)
  sConfigOC.Pulse = 0;
 8001af2:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	9308      	str	r3, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001af6:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af8:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001afa:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001afc:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afe:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b00:	f7ff f98c 	bl	8000e1c <HAL_TIM_PWM_ConfigChannel>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d139      	bne.n	8001b7c <MX_TIM1_Init+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b08:	a906      	add	r1, sp, #24
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4820      	ldr	r0, [pc, #128]	; (8001b90 <MX_TIM1_Init+0xdc>)
 8001b0e:	f7ff f985 	bl	8000e1c <HAL_TIM_PWM_ConfigChannel>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d12d      	bne.n	8001b72 <MX_TIM1_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b16:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b1c:	a90d      	add	r1, sp, #52	; 0x34
 8001b1e:	481c      	ldr	r0, [pc, #112]	; (8001b90 <MX_TIM1_Init+0xdc>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b20:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b22:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b24:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b26:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b28:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b2a:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b2c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b2e:	f7ff fa6f 	bl	8001010 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b32:	b950      	cbnz	r0, 8001b4a <MX_TIM1_Init+0x96>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_TIM1_Init+0xe0>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d00e      	beq.n	8001b5a <MX_TIM1_Init+0xa6>
}
 8001b3c:	b015      	add	sp, #84	; 0x54
 8001b3e:	bd30      	pop	{r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001b40:	2146      	movs	r1, #70	; 0x46
 8001b42:	4815      	ldr	r0, [pc, #84]	; (8001b98 <MX_TIM1_Init+0xe4>)
 8001b44:	f7ff fd46 	bl	80015d4 <_Error_Handler>
 8001b48:	e7c5      	b.n	8001ad6 <MX_TIM1_Init+0x22>
    _Error_Handler(__FILE__, __LINE__);
 8001b4a:	216a      	movs	r1, #106	; 0x6a
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_TIM1_Init+0xe4>)
 8001b4e:	f7ff fd41 	bl	80015d4 <_Error_Handler>
  if(timHandle->Instance==TIM1)
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_TIM1_Init+0xe0>)
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1f0      	bne.n	8001b3c <MX_TIM1_Init+0x88>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001b5c:	f44f 6210 	mov.w	r2, #2304	; 0x900
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	a902      	add	r1, sp, #8
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_TIM1_Init+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001b64:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f7fe fba7 	bl	80002bc <HAL_GPIO_Init>
}
 8001b6e:	b015      	add	sp, #84	; 0x54
 8001b70:	bd30      	pop	{r4, r5, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001b72:	215e      	movs	r1, #94	; 0x5e
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <MX_TIM1_Init+0xe4>)
 8001b76:	f7ff fd2d 	bl	80015d4 <_Error_Handler>
 8001b7a:	e7cc      	b.n	8001b16 <MX_TIM1_Init+0x62>
    _Error_Handler(__FILE__, __LINE__);
 8001b7c:	2159      	movs	r1, #89	; 0x59
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <MX_TIM1_Init+0xe4>)
 8001b80:	f7ff fd28 	bl	80015d4 <_Error_Handler>
 8001b84:	e7c0      	b.n	8001b08 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8001b86:	214d      	movs	r1, #77	; 0x4d
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0xe4>)
 8001b8a:	f7ff fd23 	bl	80015d4 <_Error_Handler>
 8001b8e:	e7ab      	b.n	8001ae8 <MX_TIM1_Init+0x34>
 8001b90:	200001b4 	.word	0x200001b4
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	08001fa0 	.word	0x08001fa0
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <MX_TIM2_Init>:
{
 8001ba0:	b570      	push	{r4, r5, r6, lr}
  htim2.Init.Prescaler = 0;
 8001ba2:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ba4:	2401      	movs	r4, #1
  htim2.Instance = TIM2;
 8001ba6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 0xFFFF;
 8001baa:	f64f 75ff 	movw	r5, #65535	; 0xffff
  htim2.Instance = TIM2;
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <MX_TIM2_Init+0x60>)
{
 8001bb0:	b08c      	sub	sp, #48	; 0x30
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bb2:	a903      	add	r1, sp, #12
 8001bb4:	4610      	mov	r0, r2
  htim2.Instance = TIM2;
 8001bb6:	6016      	str	r6, [r2, #0]
  htim2.Init.Period = 0xFFFF;
 8001bb8:	60d5      	str	r5, [r2, #12]
  htim2.Init.Prescaler = 0;
 8001bba:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	6093      	str	r3, [r2, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	6113      	str	r3, [r2, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	6193      	str	r3, [r2, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc2:	9304      	str	r3, [sp, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc4:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 8001bc6:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bc8:	9308      	str	r3, [sp, #32]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bca:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bcc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bce:	9403      	str	r4, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd0:	9405      	str	r4, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bd4:	f7ff f876 	bl	8000cc4 <HAL_TIM_Encoder_Init>
 8001bd8:	b968      	cbnz	r0, 8001bf6 <MX_TIM2_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	a901      	add	r1, sp, #4
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <MX_TIM2_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	f7ff fa3e 	bl	8001064 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	b118      	cbz	r0, 8001bf2 <MX_TIM2_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8001bea:	218e      	movs	r1, #142	; 0x8e
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM2_Init+0x64>)
 8001bee:	f7ff fcf1 	bl	80015d4 <_Error_Handler>
}
 8001bf2:	b00c      	add	sp, #48	; 0x30
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001bf6:	2187      	movs	r1, #135	; 0x87
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <MX_TIM2_Init+0x64>)
 8001bfa:	f7ff fceb 	bl	80015d4 <_Error_Handler>
 8001bfe:	e7ec      	b.n	8001bda <MX_TIM2_Init+0x3a>
 8001c00:	200001f4 	.word	0x200001f4
 8001c04:	08001fa0 	.word	0x08001fa0

08001c08 <MX_TIM3_Init>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
  htim3.Init.Prescaler = 0;
 8001c0a:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c0c:	2401      	movs	r4, #1
  htim3.Init.Period = 0xFFFF;
 8001c0e:	f64f 75ff 	movw	r5, #65535	; 0xffff
  htim3.Instance = TIM3;
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <MX_TIM3_Init+0x60>)
{
 8001c14:	b08c      	sub	sp, #48	; 0x30
  htim3.Instance = TIM3;
 8001c16:	4e15      	ldr	r6, [pc, #84]	; (8001c6c <MX_TIM3_Init+0x64>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c18:	4610      	mov	r0, r2
 8001c1a:	a903      	add	r1, sp, #12
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1c:	9304      	str	r3, [sp, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1e:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 8001c20:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c22:	9308      	str	r3, [sp, #32]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c26:	930b      	str	r3, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 0;
 8001c28:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	6093      	str	r3, [r2, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	6113      	str	r3, [r2, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	6193      	str	r3, [r2, #24]
  htim3.Instance = TIM3;
 8001c30:	6016      	str	r6, [r2, #0]
  htim3.Init.Period = 0xFFFF;
 8001c32:	60d5      	str	r5, [r2, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c34:	9403      	str	r4, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c36:	9405      	str	r4, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c38:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c3a:	f7ff f843 	bl	8000cc4 <HAL_TIM_Encoder_Init>
 8001c3e:	b968      	cbnz	r0, 8001c5c <MX_TIM3_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c42:	a901      	add	r1, sp, #4
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4a:	f7ff fa0b 	bl	8001064 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	b118      	cbz	r0, 8001c58 <MX_TIM3_Init+0x50>
    _Error_Handler(__FILE__, __LINE__);
 8001c50:	21b0      	movs	r1, #176	; 0xb0
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_TIM3_Init+0x68>)
 8001c54:	f7ff fcbe 	bl	80015d4 <_Error_Handler>
}
 8001c58:	b00c      	add	sp, #48	; 0x30
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001c5c:	21a9      	movs	r1, #169	; 0xa9
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_TIM3_Init+0x68>)
 8001c60:	f7ff fcb8 	bl	80015d4 <_Error_Handler>
 8001c64:	e7ec      	b.n	8001c40 <MX_TIM3_Init+0x38>
 8001c66:	bf00      	nop
 8001c68:	20000174 	.word	0x20000174
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	08001fa0 	.word	0x08001fa0

08001c74 <MX_TIM4_Init>:
{
 8001c74:	b570      	push	{r4, r5, r6, lr}
  htim4.Init.Prescaler = 0;
 8001c76:	2300      	movs	r3, #0
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c78:	2401      	movs	r4, #1
  htim4.Init.Period = 0xFFFF;
 8001c7a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  htim4.Instance = TIM4;
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <MX_TIM4_Init+0x60>)
{
 8001c80:	b08c      	sub	sp, #48	; 0x30
  htim4.Instance = TIM4;
 8001c82:	4e15      	ldr	r6, [pc, #84]	; (8001cd8 <MX_TIM4_Init+0x64>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c84:	4610      	mov	r0, r2
 8001c86:	a903      	add	r1, sp, #12
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c88:	9304      	str	r3, [sp, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c8a:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 8001c8c:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c8e:	9308      	str	r3, [sp, #32]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c90:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c92:	930b      	str	r3, [sp, #44]	; 0x2c
  htim4.Init.Prescaler = 0;
 8001c94:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	6093      	str	r3, [r2, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	6113      	str	r3, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9a:	6193      	str	r3, [r2, #24]
  htim4.Instance = TIM4;
 8001c9c:	6016      	str	r6, [r2, #0]
  htim4.Init.Period = 0xFFFF;
 8001c9e:	60d5      	str	r5, [r2, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ca0:	9403      	str	r4, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca2:	9405      	str	r4, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ca6:	f7ff f80d 	bl	8000cc4 <HAL_TIM_Encoder_Init>
 8001caa:	b968      	cbnz	r0, 8001cc8 <MX_TIM4_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cae:	a901      	add	r1, sp, #4
 8001cb0:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cb6:	f7ff f9d5 	bl	8001064 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	b118      	cbz	r0, 8001cc4 <MX_TIM4_Init+0x50>
    _Error_Handler(__FILE__, __LINE__);
 8001cbc:	21d2      	movs	r1, #210	; 0xd2
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM4_Init+0x68>)
 8001cc0:	f7ff fc88 	bl	80015d4 <_Error_Handler>
}
 8001cc4:	b00c      	add	sp, #48	; 0x30
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001cc8:	21cb      	movs	r1, #203	; 0xcb
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_TIM4_Init+0x68>)
 8001ccc:	f7ff fc82 	bl	80015d4 <_Error_Handler>
 8001cd0:	e7ec      	b.n	8001cac <MX_TIM4_Init+0x38>
 8001cd2:	bf00      	nop
 8001cd4:	20000134 	.word	0x20000134
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	08001fa0 	.word	0x08001fa0

08001ce0 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 8001ce0:	6802      	ldr	r2, [r0, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_TIM_PWM_MspInit+0x28>)
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d000      	beq.n	8001cea <HAL_TIM_PWM_MspInit+0xa>
}
 8001ce8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cea:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001cee:	699a      	ldr	r2, [r3, #24]
{
 8001cf0:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cf6:	619a      	str	r2, [r3, #24]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	9b01      	ldr	r3, [sp, #4]
}
 8001d02:	b002      	add	sp, #8
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <HAL_TIM_Encoder_MspInit>:
{
 8001d0c:	b530      	push	{r4, r5, lr}
  if(tim_encoderHandle->Instance==TIM2)
 8001d0e:	6803      	ldr	r3, [r0, #0]
{
 8001d10:	b089      	sub	sp, #36	; 0x24
  if(tim_encoderHandle->Instance==TIM2)
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_Encoder_MspInit+0x44>
  else if(tim_encoderHandle->Instance==TIM3)
 8001d18:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d03f      	beq.n	8001d9e <HAL_TIM_Encoder_MspInit+0x92>
  else if(tim_encoderHandle->Instance==TIM4)
 8001d1e:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_TIM_Encoder_MspInit+0xd0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Encoder_MspInit+0x1c>
}
 8001d24:	b009      	add	sp, #36	; 0x24
 8001d26:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = Encoder_X_Pin_1_Pin|Encoder_X_Pin_0_Pin;
 8001d2a:	25c0      	movs	r5, #192	; 0xc0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_TIM_Encoder_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d30:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	482c      	ldr	r0, [pc, #176]	; (8001de4 <HAL_TIM_Encoder_MspInit+0xd8>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d34:	f042 0204 	orr.w	r2, r2, #4
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = Encoder_X_Pin_1_Pin|Encoder_X_Pin_0_Pin;
 8001d3c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d46:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f7fe fab7 	bl	80002bc <HAL_GPIO_Init>
}
 8001d4e:	e7e9      	b.n	8001d24 <HAL_TIM_Encoder_MspInit+0x18>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d50:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = Encoder_Z_Pin_1_Pin;
 8001d52:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d5a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(Encoder_Z_Pin_1_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	61da      	str	r2, [r3, #28]
 8001d64:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(Encoder_Z_Pin_1_GPIO_Port, &GPIO_InitStruct);
 8001d66:	4820      	ldr	r0, [pc, #128]	; (8001de8 <HAL_TIM_Encoder_MspInit+0xdc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Encoder_Z_Pin_1_Pin;
 8001d70:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d72:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(Encoder_Z_Pin_1_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f7fe faa1 	bl	80002bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_Z_Pin_0_Pin;
 8001d7a:	2308      	movs	r3, #8
    HAL_GPIO_Init(Encoder_Z_Pin_0_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	a904      	add	r1, sp, #16
 8001d7e:	4819      	ldr	r0, [pc, #100]	; (8001de4 <HAL_TIM_Encoder_MspInit+0xd8>)
    GPIO_InitStruct.Pin = Encoder_Z_Pin_0_Pin;
 8001d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d82:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(Encoder_Z_Pin_0_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f7fe fa99 	bl	80002bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d8c:	6853      	ldr	r3, [r2, #4]
 8001d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6053      	str	r3, [r2, #4]
 8001d9c:	e7c2      	b.n	8001d24 <HAL_TIM_Encoder_MspInit+0x18>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = Encoder_Y_Pin_1_Pin|Encoder_Y_Pin_0_Pin;
 8001da0:	2530      	movs	r5, #48	; 0x30
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_TIM_Encoder_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001da6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	480e      	ldr	r0, [pc, #56]	; (8001de4 <HAL_TIM_Encoder_MspInit+0xd8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001daa:	f042 0202 	orr.w	r2, r2, #2
 8001dae:	61da      	str	r2, [r3, #28]
 8001db0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = Encoder_Y_Pin_1_Pin|Encoder_Y_Pin_0_Pin;
 8001db2:	9504      	str	r5, [sp, #16]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f7fe fa7c 	bl	80002bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001dc4:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dc6:	6853      	ldr	r3, [r2, #4]
 8001dc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001dcc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd4:	6053      	str	r3, [r2, #4]
 8001dd6:	e7a5      	b.n	8001d24 <HAL_TIM_Encoder_MspInit+0x18>
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010000 	.word	0x40010000

08001df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001df0:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 8001df4:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df8:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_USART1_UART_Init+0x34>)
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <MX_USART1_UART_Init+0x38>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfe:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 8001e00:	e883 0030 	stmia.w	r3, {r4, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e04:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e10:	f7ff fa10 	bl	8001234 <HAL_UART_Init>
 8001e14:	b900      	cbnz	r0, 8001e18 <MX_USART1_UART_Init+0x28>
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e18:	2142      	movs	r1, #66	; 0x42
  }

}
 8001e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <MX_USART1_UART_Init+0x3c>)
 8001e20:	f7ff bbd8 	b.w	80015d4 <_Error_Handler>
 8001e24:	20000234 	.word	0x20000234
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	08001fb0 	.word	0x08001fb0

08001e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_MspInit+0x54>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d000      	beq.n	8001e3a <HAL_UART_MspInit+0xa>
 8001e38:	4770      	bx	lr
{
 8001e3a:	b570      	push	{r4, r5, r6, lr}
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e3c:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	2403      	movs	r4, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e44:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e48:	699a      	ldr	r2, [r3, #24]
{
 8001e4a:	b086      	sub	sp, #24
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e50:	619a      	str	r2, [r3, #24]
 8001e52:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	480a      	ldr	r0, [pc, #40]	; (8001e88 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e60:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f7fe fa29 	bl	80002bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	a902      	add	r1, sp, #8
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_UART_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e74:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f7fe fa1f 	bl	80002bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e7e:	b006      	add	sp, #24
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	bf00      	nop
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40010800 	.word	0x40010800

08001e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e8e:	e003      	b.n	8001e98 <LoopCopyDataInit>

08001e90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e96:	3104      	adds	r1, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e98:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ea0:	d3f6      	bcc.n	8001e90 <CopyDataInit>
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ea4:	e002      	b.n	8001eac <LoopFillZerobss>

08001ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ea8:	f842 3b04 	str.w	r3, [r2], #4

08001eac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001eae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001eb0:	d3f9      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eb2:	f7ff fdd7 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f000 f80f 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eba:	f7ff fb1b 	bl	80014f4 <main>
  bx lr
 8001ebe:	4770      	bx	lr
  ldr r3, =_sidata
 8001ec0:	08001fc8 	.word	0x08001fc8
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ec8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ecc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001ed0:	20000274 	.word	0x20000274

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>
	...

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2500      	movs	r5, #0
 8001edc:	4e0c      	ldr	r6, [pc, #48]	; (8001f10 <__libc_init_array+0x38>)
 8001ede:	4c0d      	ldr	r4, [pc, #52]	; (8001f14 <__libc_init_array+0x3c>)
 8001ee0:	1ba4      	subs	r4, r4, r6
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	42a5      	cmp	r5, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	f000 f81a 	bl	8001f20 <_init>
 8001eec:	2500      	movs	r5, #0
 8001eee:	4e0a      	ldr	r6, [pc, #40]	; (8001f18 <__libc_init_array+0x40>)
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	; (8001f1c <__libc_init_array+0x44>)
 8001ef2:	1ba4      	subs	r4, r4, r6
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	42a5      	cmp	r5, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f00:	4798      	blx	r3
 8001f02:	3501      	adds	r5, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f0a:	4798      	blx	r3
 8001f0c:	3501      	adds	r5, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08001fc0 	.word	0x08001fc0
 8001f14:	08001fc0 	.word	0x08001fc0
 8001f18:	08001fc0 	.word	0x08001fc0
 8001f1c:	08001fc4 	.word	0x08001fc4

08001f20 <_init>:
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f22:	bf00      	nop
 8001f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f26:	bc08      	pop	{r3}
 8001f28:	469e      	mov	lr, r3
 8001f2a:	4770      	bx	lr

08001f2c <_fini>:
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2e:	bf00      	nop
 8001f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f32:	bc08      	pop	{r3}
 8001f34:	469e      	mov	lr, r3
 8001f36:	4770      	bx	lr
